{"noir_version":"1.0.0-beta.2+1a2a08cbcb68646ff1aaef383cfc1798933c1355","hash":9042762978155049072,"abi":{"parameters":[{"name":"header","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":576,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"pubkey","type":{"kind":"struct","path":"zkemail::dkim::RSAPubkey","fields":[{"name":"modulus","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"redc","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"date_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"subject_sequence","type":{"kind":"struct","path":"zkemail::Sequence","fields":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from_header_sequence","type":{"kind":"struct","path":"zkemail::Sequence","fields":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from_address_sequence","type":{"kind":"struct","path":"zkemail::Sequence","fields":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"array","length":2,"type":{"kind":"field"}},{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":320,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":37,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":101,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}]},"visibility":"public"},"error_types":{"2121844606697934511":{"error_kind":"string","string":"Email address must start with an acceptable character"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"4240586432187010441":{"error_kind":"string","string":"Email address must start immediately after '<' if bracket is present"},"4524007320076231485":{"error_kind":"string","string":"Header field out of bounds of header"},"4540277600904443375":{"error_kind":"string","string":"Email address must end with an acceptable character"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5466606472443271855":{"error_kind":"string","string":"Header field must not contain newlines"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8707862474619154823":{"error_kind":"string","string":"Email address must only contain acceptable characters"},"8968308905366009901":{"error_kind":"string","string":"Email address sequence out of bounds"},"9619408434855056367":{"error_kind":"string","string":"Header field name must be followed by a colon"},"11883698362854120768":{"error_kind":"string","string":"Header field must start with CRLF"},"12712340723692189130":{"error_kind":"string","string":"Header field name does not match"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14734181347393705282":{"error_kind":"string","string":"Header field must end with CRLF"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"","file_map":{"6":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"7":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"18":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    /// Safety: borrow is enforced to be boolean due to its type.\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        /// Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            /// Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        /// Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"19":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"21":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    /// Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"27":{"source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        /// Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        /// Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    /// Safety: the msg_len is checked below in verify_msg_len\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n\n        /// Safety: testing context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 0) };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        /// Safety: test context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 64) };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        /// Safety: testing context\n        let msg_block = unsafe { attach_len_to_msg_block(input, 1, 448) };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n","path":"std/hash/sha256.nr"},"62":{"source":"use std::{collections::bounded_vec::BoundedVec, hash::pedersen_hash};\nuse zkemail::{\n    dkim::RSAPubkey,\n    headers::{constrain_header_field, email_address::get_email_address},\n    KEY_LIMBS_2048,\n    MAX_EMAIL_ADDRESS_LENGTH,\n    Sequence,\n};\n\n// Maximum length of a header of an email\nglobal MAX_EMAIL_HEADER_LENGTH: u32 = 576;\n// if index 11 = \" \" then length is 41, else 42\nglobal DATE_LENGTH_DETERMINATION_INDEX: u32 = 11;\n// max length of a \"Date\" field in an email header\nglobal MAX_DATE_LENGTH: u32 = 36;\n// max length of Subject we will allow\nglobal MAX_SUBJECT_LENGTH: u32 = 100;\n\n/**\n * Extract the text from a header field\n * @dev constrained to be one uninterrupted and complete header field\n *      will fail if max size too small or contains multiple header fields (i.e. crlf found)\n * @dev one extra empty byte is added to the return - this could be removed by copying to smaller\n *      array but not really worth it. trick needed for unconditional (efficient) RAM assignment\n *\n * @param MAX_HEADER_FIELD_LENGTH - The maximum length of the header field\n * @param HEADER_FIELD_NAME_LENGTH - the length of the header field name (i.e. \"from\" -> 4)\n * @param header - the email header bytes as validated by the DKIM signature\n * @param header_field_sequence - the start index and actual length of the header field\n * @param header_naame - the name of the header field (i.e. \"from\")\n * @return - the extracted header field as a BoundedVec showing the exact size of the field\n */\npub fn extract_header_field<let MAX_HEADER_FIELD_LENGTH: u32, let HEADER_FIELD_NAME_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH>,\n    header_field_sequence: Sequence,\n    header_name: [u8; HEADER_FIELD_NAME_LENGTH],\n) -> BoundedVec<u8, MAX_HEADER_FIELD_LENGTH + 1> {\n    // constrain the header field to be complete\n    constrain_header_field::<MAX_EMAIL_HEADER_LENGTH, MAX_HEADER_FIELD_LENGTH, HEADER_FIELD_NAME_LENGTH>(\n        header,\n        header_field_sequence,\n        header_name,\n    );\n\n    // copy the header field\n    // use annoying trick to prevent conditional array assignment gate blowup\n    // dont include (for example) \"subject:\" ...\n    let start_index = header_field_sequence.index + HEADER_FIELD_NAME_LENGTH + 1;\n    let end_index = header_field_sequence.length - HEADER_FIELD_NAME_LENGTH - 1;\n    let mut storage: [u8; MAX_HEADER_FIELD_LENGTH + 1] = [0; MAX_HEADER_FIELD_LENGTH + 1];\n    for i in 0..MAX_HEADER_FIELD_LENGTH - HEADER_FIELD_NAME_LENGTH - 1 {\n        let mut index = i;\n        if i >= end_index {\n            index = MAX_HEADER_FIELD_LENGTH;\n        }\n        storage[index] = header.get(start_index + i);\n    }\n\n    // set last byte to 0 again\n    storage[MAX_HEADER_FIELD_LENGTH] = 0;\n\n    // determine length of the extracted field (- field name len - \":\" - \"\\r\\n\")\n    let len = header_field_sequence.length - HEADER_FIELD_NAME_LENGTH - 1;\n\n    // copy into a bounded vec with length set\n    let extracted: BoundedVec<u8, MAX_HEADER_FIELD_LENGTH + 1> = BoundedVec { storage, len };\n    extracted\n}\n\n/**\n * Extract the datetime, subject, and from email address from an email header\n *\n * @param header - The email header, 0-padded at end to the MAX_EMAIL_HEADER_LENGTH\n * @param pubkey - The DKIM RSA Public Key modulus and reduction parameter\n * @param signature - The DKIM RSA Signature\n * @param from_header_sequence - The index and length of the \"From\" header field\n * @param from_address_sequence - The index and length of the \"From\" email address\n * @return - \n *         0: Pedersen hash of DKIM public key (root of trust)\n *         1: Pedersen hash of DKIM signature (email nullifier)\n */\n\nfn main(\n    header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH>,\n    pubkey: RSAPubkey<KEY_LIMBS_2048>,\n    signature: [Field; KEY_LIMBS_2048],\n    date_index: u32,\n    subject_sequence: Sequence,\n    from_header_sequence: Sequence,\n    from_address_sequence: Sequence,\n    ) -> pub ([Field; 2], BoundedVec<u8, MAX_EMAIL_ADDRESS_LENGTH>, BoundedVec<u8, MAX_DATE_LENGTH + 1>, BoundedVec<u8, MAX_SUBJECT_LENGTH + 1>) {\n    // check the body and header lengths are within bounds\n    assert(header.len() <= MAX_EMAIL_HEADER_LENGTH);\n\n    // ~94416 gates\n    // verify the dkim signature over the header\n    pubkey.verify_dkim_signature(header, signature);\n\n    // // extract to and from email addresses\n    let from: [u8; 4] = comptime { \"from\".as_bytes() };\n    let date: [u8; 4] = comptime { \"date\".as_bytes() };\n    let subject: [u8; 7] = comptime { \"subject\".as_bytes() };\n\n    // ~21888 gates\n    // 16k gate cost? has to be able to be brought down\n    let from_address = get_email_address(header, from_header_sequence, from_address_sequence, from);\n\n    // determine datetime length\n    // determine the index of the selector that chooses the length of the date field\n    let length_decider = date_index + DATE_LENGTH_DETERMINATION_INDEX;\n    let date_length = if header.get(length_decider) == 0x20 {\n        MAX_DATE_LENGTH - 1\n    } else {\n        MAX_DATE_LENGTH\n    };\n\n    // get datetime\n    // ~6700 gates\n    let date_sequence = Sequence { index: date_index, length: date_length };\n    let datetime = extract_header_field::<MAX_DATE_LENGTH, 4>(header, date_sequence, date);\n\n    // get the subject\n    // ~9148 gates\n    let subject = extract_header_field::<MAX_SUBJECT_LENGTH, 7>(header, subject_sequence, subject);\n\n    // hash the pubkey and signature for the standard outputs\n    // ~13813 gates\n    let email_nullifier = pedersen_hash(signature);\n    let standard_out = [pubkey.hash(), email_nullifier];\n    (standard_out, from_address, datetime, subject)\n}\n\n#[test]\nfn test_email_circuit() {\n    let header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH> = BoundedVec {\n        storage: [\n            116, 111, 58, 106, 112, 52, 103, 64, 109, 97, 99, 104, 51, 52, 46, 115, 112, 97, 99,\n            101, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 84, 104, 105, 115, 32, 105, 115, 32,\n            97, 32, 116, 101, 115, 116, 32, 101, 109, 97, 105, 108, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 67, 65, 43, 114, 74, 106, 61, 122, 84, 87, 100, 56, 115,\n            95, 52, 70, 120, 106, 79, 69, 75, 117, 106, 99, 48, 111, 76, 102, 85, 53, 76, 110, 48,\n            61, 75, 61, 43, 105, 97, 84, 80, 103, 49, 71, 85, 113, 79, 48, 120, 50, 103, 64, 109,\n            97, 105, 108, 46, 103, 109, 97, 105, 108, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116,\n            101, 58, 84, 117, 101, 44, 32, 49, 52, 32, 74, 97, 110, 32, 50, 48, 50, 53, 32, 50, 51,\n            58, 48, 48, 58, 52, 50, 32, 45, 48, 55, 48, 48, 13, 10, 102, 114, 111, 109, 58, 74, 97,\n            99, 107, 32, 71, 105, 108, 99, 114, 101, 115, 116, 32, 60, 103, 105, 108, 99, 114, 101,\n            115, 116, 46, 106, 97, 99, 107, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 62, 13,\n            10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 13, 10,\n            100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59,\n            32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108,\n            97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 103, 109, 97,\n            105, 108, 46, 99, 111, 109, 59, 32, 115, 61, 50, 48, 50, 51, 48, 54, 48, 49, 59, 32,\n            116, 61, 49, 55, 51, 54, 57, 50, 48, 56, 53, 51, 59, 32, 120, 61, 49, 55, 51, 55, 53,\n            50, 53, 54, 53, 51, 59, 32, 100, 97, 114, 110, 61, 109, 97, 99, 104, 51, 52, 46, 115,\n            112, 97, 99, 101, 59, 32, 104, 61, 116, 111, 58, 115, 117, 98, 106, 101, 99, 116, 58,\n            109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 100, 97, 116, 101, 58, 102, 114,\n            111, 109, 58, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 102, 114,\n            111, 109, 58, 116, 111, 58, 99, 99, 58, 115, 117, 98, 106, 101, 99, 116, 32, 58, 100,\n            97, 116, 101, 58, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 114, 101, 112,\n            108, 121, 45, 116, 111, 59, 32, 98, 104, 61, 65, 97, 90, 79, 101, 48, 105, 52, 51, 90,\n            117, 108, 68, 90, 54, 83, 48, 55, 84, 108, 88, 85, 51, 51, 108, 121, 84, 67, 122, 99,\n            118, 54, 116, 49, 88, 80, 89, 43, 52, 89, 77, 113, 81, 61, 59, 32, 98, 61, 128, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 15, 192,\n        ],\n        len: 504,\n    };\n    let pubkey: RSAPubkey<KEY_LIMBS_2048> = RSAPubkey {\n        modulus: [\n            0x95d4c106145000c13aeeedd678b05f,\n            0xdb1707fb6ee7a2e61bbb440cd9ab67,\n            0x9f5aa685b528f41ef1bad24a546c8b,\n            0xff02c48d58d0538d96ab50620b28ad,\n            0x3c08e0917cd795cc9d25636606145c,\n            0xe1d265bd61b22b6b13454f6e1273c4,\n            0xa41ea8eb5c5b8aebb07db82fb5e10f,\n            0xe81f505e13e0765bd8f6366d0b443f,\n            0x32a76308aae634320642d63fe2e018,\n            0x5e51db415a2940011aee0d4db4767c,\n            0x549dc4f0110e070cec0b111021f043,\n            0x696168d1c7ecbc7e31d69bf3fcc337,\n            0x8ab996377df7a009eee7764b238b42,\n            0x0a9d31d535da1d957c44de38992019,\n            0x2fd2a1d99f995b360f52801f79a2d4,\n            0x06e8b83b09b817dbcbf4bcda3c6ca0,\n            0xdbd2293d6192a84a7b4c5c699d31f9,\n            0x9e,\n        ],\n        redc: [\n            0x3fb74febc080da4b8324c69a64360d,\n            0x780208b14e02ad09841ed76a8b37c6,\n            0x2f764289f656d23ce3c1eb91c1f487,\n            0xfc5e41a05066de39f2537c2f252204,\n            0xec77198110c84b8bbd5f1993379a33,\n            0xe6bd7b5ac7fc75808f9158307b3fef,\n            0x12b8831ed1c93fea29c41f4e2b7dcd,\n            0x9826bf4bd5f4030aa08e2b15791bca,\n            0x01b0c74e64f36eaee89a393e5b1f4a,\n            0xf9f071c58b4b194945ea8be9edb3d8,\n            0xf0fad970f7fdd1b12b70e97819b0a8,\n            0xd8ed3c75d627d56146e8ca3b723d69,\n            0xecada80f9c693706b41028e709be14,\n            0x1d64b969fc1752cd8a3b7f5861a2b4,\n            0x0f82b2d9a0bffe9791a3b048fd6f3d,\n            0x812c0467e043ab5f330abb8be8c98d,\n            0xaf3c74ff5cdfcd04f75df324e1c60e,\n            0x19c8,\n        ],\n    };\n    let signature = [\n        0x555d5af7bf175f4434295db07baced,\n        0xf90ca3cb2cee102221a444eff9ab62,\n        0x037389e42ee0f3f39f159d2ecb7c14,\n        0x990554feb8000ca6af6c9f1be4e669,\n        0x0cfe9a31b8048c9a4208231837c71b,\n        0xa4b6024c47ce71416359c79cb108c4,\n        0xc213998ca9e267b901993f513fbbb8,\n        0x5eb53add722817f8ff5742fa617894,\n        0xb4466636280c79b9dfbf384b7dc08a,\n        0x01ad997b79752e4b80f88110f639fd,\n        0xf3fdfdadac159c9b77ceff61a637fc,\n        0xeabf496ad68f31a7cc35884a0ad4a4,\n        0xa32bf2155518ed70425a74c981f17c,\n        0x10f3a360de7d58f7d95af82f8c56d3,\n        0x6251ec644341c6ce305bb1a51caac8,\n        0x4a21f772dfb631f3803d6c115739a5,\n        0x81473ffb00fbf59abd7b1d8d5e92ed,\n        0x6d,\n    ];\n    let date_index: u32 = 133;\n    let subject_sequence = Sequence { index: 22, length: 28 };\n    let from_header_sequence = Sequence { index: 171, length: 44 };\n    let from_address_sequence = Sequence { index: 191, length: 23 };\n\n    // test main circuit\n    let (_, from_address, datetime, subject) = main(\n        header,\n        pubkey,\n        signature,\n        date_index,\n        subject_sequence,\n        from_header_sequence,\n        from_address_sequence,\n    );\n\n    // check the expected sender email address\n    let expected_from_length: u32 = 23;\n    let expected_from: [u8; 23] = comptime { \"gilcrest.jack@gmail.com\".as_bytes() };\n    assert(from_address.len() == expected_from_length);\n    for i in 0..expected_from_length {\n        assert(from_address.get(i) == expected_from[i]);\n    }\n\n    // check the expected datetime\n    let expected_datetime_length: u32 = 31;\n    let expected_datetime: [u8; 31] = comptime { \"Tue, 14 Jan 2025 23:00:42 -0700\".as_bytes() };\n    assert(datetime.len() == expected_datetime_length);\n    for i in 0..expected_datetime_length {\n        assert(datetime.get(i) == expected_datetime[i]);\n    }\n\n    // check the expected subject\n    let expected_subject_length: u32 = 20;\n    let expected_subject: [u8; 20] = comptime { \"This is a test email\".as_bytes() };\n\n    assert(subject.len() == expected_subject_length);\n    for i in 0..expected_subject_length {\n        assert(subject.get(i) == expected_subject[i]);\n    }\n}\n","path":"/Users/zhengyawen/Documents/GitHub/zkemail.nr_header_demo/src/main.nr"},"63":{"source":"use crate::{KEY_LIMBS_1024, KEY_LIMBS_2048, RSA_EXPONENT};\nuse bignum::{params::BigNumParams, RuntimeBigNum};\nuse rsa::{rsa::verify_sha256_pkcs1v15, types::{RBN1024, RBN2048}};\nuse std::hash::{pedersen_hash, sha256_var};\n\npub struct RSAPubkey<let KEY_LIMBS: u32> {\n    modulus: [Field; KEY_LIMBS],\n    redc: [Field; KEY_LIMBS],\n}\n\nimpl<let KEY_LIMBS: u32> RSAPubkey<KEY_LIMBS> {\n\n    pub fn new(modulus: [Field; KEY_LIMBS], redc: [Field; KEY_LIMBS]) -> Self {\n        Self { modulus, redc }\n    }\n\n    pub fn validate_range(self, signature: [Field; KEY_LIMBS]) {\n        for i in 0..KEY_LIMBS {}\n    }\n}\n\nimpl RSAPubkey<KEY_LIMBS_1024> {\n    pub fn verify_dkim_signature<let MAX_HEADER_LENGTH: u32>(\n        self,\n        header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n        signature: [Field; KEY_LIMBS_1024],\n    ) {\n        // hash the header\n        let header_hash = sha256_var(header.storage(), header.len() as u64);\n\n        let params: BigNumParams<KEY_LIMBS_1024, 1024> =\n            BigNumParams::new(false, self.modulus, self.redc);\n\n        let signature: RBN1024 = RuntimeBigNum::from_array(params, signature);\n        signature.validate_in_range();\n\n        // verify the DKIM signature over the header\n        assert(verify_sha256_pkcs1v15(header_hash, signature, RSA_EXPONENT));\n    }\n\n    pub fn hash(self) -> Field {\n        let mut dkim_preimage = [0; 9];\n        // compose first 4 limbs of modulus and redc\n        for i in 0..4 {\n            let modulus_hi = self.modulus[i * 2] * 2.pow_32(120);\n            let redc_hi = self.redc[i * 2] * 2.pow_32(120);\n            dkim_preimage[i] = modulus_hi + self.modulus[i * 2 + 1];\n            dkim_preimage[i + 4] = redc_hi + self.redc[i * 2 + 1];\n        }\n        // compose last two elements of redc and modulus together\n        let modulus_hi = self.modulus[8] * 2.pow_32(120);\n        dkim_preimage[8] = modulus_hi + self.redc[8];\n        // hash the pubkey\n        pedersen_hash(dkim_preimage)\n    }\n}\n\nimpl RSAPubkey<KEY_LIMBS_2048> {\n    pub fn verify_dkim_signature<let MAX_HEADER_LENGTH: u32>(\n        self,\n        header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n        signature: [Field; KEY_LIMBS_2048],\n    ) {\n        // hash the header\n        let header_hash = sha256_var(header.storage(), header.len() as u64);\n\n        let params: BigNumParams<KEY_LIMBS_2048, 2048> =\n            BigNumParams::new(false, self.modulus, self.redc);\n\n        let signature: RBN2048 = RuntimeBigNum::from_array(params, signature);\n        signature.validate_in_range();\n\n        // verify the DKIM signature over the header\n        assert(verify_sha256_pkcs1v15(header_hash, signature, RSA_EXPONENT));\n    }\n\n    pub fn hash(self) -> Field {\n        let mut dkim_preimage = [0; 18];\n        // compose limbs\n        for i in 0..9 {\n            let modulus_hi = self.modulus[i * 2] * 2.pow_32(120);\n            let redc_hi = self.redc[i * 2] * 2.pow_32(120);\n            dkim_preimage[i] = modulus_hi + self.modulus[i * 2 + 1];\n            dkim_preimage[i + 9] = redc_hi + self.redc[i * 2 + 1];\n        }\n        // hash the pubkey\n        pedersen_hash(dkim_preimage)\n    }\n}\n","path":"/Users/zhengyawen/nargo/github.com/zkemail/zkemail.nr/v0.4.0/lib/src/dkim.nr"},"65":{"source":"use crate::{\n    EMAIL_ADDRESS_CHAR_TABLE, headers::constrain_header_field_detect_last_angle_bracket,\n    MAX_EMAIL_ADDRESS_LENGTH, Sequence,\n};\n\npub fn get_email_address<let MAX_HEADER_LENGTH: u32, let HEADER_FIELD_NAME_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    header_field_sequence: Sequence,\n    email_address_sequence: Sequence,\n    header_field_name: [u8; HEADER_FIELD_NAME_LENGTH],\n) -> BoundedVec<u8, MAX_EMAIL_ADDRESS_LENGTH> {\n    // check field is uninterrupted and matches the expected field name\n    let last_angle_bracket = constrain_header_field_detect_last_angle_bracket::<MAX_HEADER_LENGTH, MAX_EMAIL_ADDRESS_LENGTH + HEADER_FIELD_NAME_LENGTH + 1, HEADER_FIELD_NAME_LENGTH>(\n        header,\n        header_field_sequence,\n        header_field_name,\n    );\n    // if angle bracket found, assert index is +1\n    if last_angle_bracket != 0 {\n        assert(\n            email_address_sequence.index == last_angle_bracket + 1,\n            \"Email address must start immediately after '<' if bracket is present\",\n        );\n    }\n    // check email sequence is within header field\n    assert(\n        email_address_sequence.index >= header_field_sequence.index\n            & email_address_sequence.end_index() <= header_field_sequence.end_index(),\n        \"Email address sequence out of bounds\",\n    );\n\n    // constrained get email address\n    parse_email_address(header, email_address_sequence)\n}\n\npub fn parse_email_address<let MAX_HEADER_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    email_address_sequence: Sequence,\n) -> BoundedVec<u8, MAX_EMAIL_ADDRESS_LENGTH> {\n    // check the sequence is proceeded by an acceptable character\n    if email_address_sequence.index != 0 {\n        assert(\n            EMAIL_ADDRESS_CHAR_TABLE[header.get_unchecked(email_address_sequence.index - 1)] == 2,\n            \"Email address must start with an acceptable character\",\n        );\n    }\n    if email_address_sequence.end_index() < header.len() {\n        assert(\n            EMAIL_ADDRESS_CHAR_TABLE[header.get_unchecked(\n                email_address_sequence.index + email_address_sequence.length,\n            )]\n                == 3,\n            \"Email address must end with an acceptable character\",\n        );\n    }\n    // check the email address and assign\n    let mut email_address: BoundedVec<u8, MAX_EMAIL_ADDRESS_LENGTH> = BoundedVec::new();\n    for i in 0..MAX_EMAIL_ADDRESS_LENGTH {\n        let index = email_address_sequence.index + i;\n        if index < email_address_sequence.end_index() {\n            let letter = header.get_unchecked(index);\n            email_address.set_unchecked(i, letter);\n            assert(\n                EMAIL_ADDRESS_CHAR_TABLE[letter] == 1,\n                \"Email address must only contain acceptable characters\",\n            );\n        }\n    }\n    email_address.len = email_address_sequence.length;\n    // todo: should probably introduce a check for @\n    email_address\n}\n\n","path":"/Users/zhengyawen/nargo/github.com/zkemail/zkemail.nr/v0.4.0/lib/src/headers/email_address.nr"},"66":{"source":"use crate::{CR, LF, Sequence};\n\npub mod body_hash;\npub mod email_address;\n\n/**\n * Constrain a sequence in a header to be within the correct bounds\n *\n * @param MAX_HEADER_LENGTH - The maximum length of the email header\n * @param MAX_HEADER_FIELD_LENGTH - The maximum length of the header field\n * @param HEADER_FIELD_NAME_LENGTH - The length of the header field name\n * @param header - The email header as validated in the DKIM signature\n * @param header_field_sequence - The sequence of the header field\n * @param header_field_name - The name of the header field\n */\nfn check_header_field_bounds<let MAX_HEADER_LENGTH: u32, let MAX_HEADER_FIELD_LENGTH: u32, let HEADER_FIELD_NAME_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    header_field_sequence: Sequence,\n    header_field_name: [u8; HEADER_FIELD_NAME_LENGTH],\n) {\n    // check the range of the sequence is within the header (so we can use get_unchecked)\n    let end_index = header_field_sequence.end_index();\n    assert(end_index <= header.len(), \"Header field out of bounds of header\");\n\n    // if the sequence is not the start, check for a newline\n    if header_field_sequence.index != 0 {\n        assert(\n            header.get_unchecked(header_field_sequence.index - 2) == CR,\n            \"Header field must start with CRLF\",\n        );\n        assert(\n            header.get_unchecked(header_field_sequence.index - 1) == LF,\n            \"Header field must start with CRLF\",\n        );\n    }\n\n    // if the sequence is not the end, check for a newline\n    if end_index != header.len() {\n        assert(header.get_unchecked(end_index) == CR, \"Header field must end with CRLF\");\n        assert(header.get_unchecked(end_index + 1) == LF, \"Header field must end with CRLF\");\n    }\n\n    // check that the header field name matches the expected name\n    for i in 0..HEADER_FIELD_NAME_LENGTH {\n        assert(\n            header.get_unchecked(header_field_sequence.index + i) == header_field_name[i],\n            \"Header field name does not match\",\n        );\n    }\n    assert(\n        header.get_unchecked(header_field_sequence.index + HEADER_FIELD_NAME_LENGTH) == 0x3a,\n        \"Header field name must be followed by a colon\",\n    );\n}\n\n/**\n * Constrain a sequence in a header to match the specific header field\n *\n * @param MAX_HEADER_LENGTH - The maximum length of the email header\n * @param MAX_HEADER_FIELD_LENGTH - The maximum length of the header field\n * @param HEADER_FIELD_NAME_LENGTH - The length of the header field name\n * @param header - The email header as validated in the DKIM signature\n * @param header_field_sequence - The sequence of the header field\n * @param header_field_name - The name of the header field\n */\npub fn constrain_header_field<let MAX_HEADER_LENGTH: u32, let MAX_HEADER_FIELD_LENGTH: u32, let HEADER_FIELD_NAME_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    header_field_sequence: Sequence,\n    header_field_name: [u8; HEADER_FIELD_NAME_LENGTH],\n) {\n    // constrain beginning of header field\n    check_header_field_bounds::<MAX_HEADER_LENGTH, MAX_HEADER_FIELD_LENGTH, HEADER_FIELD_NAME_LENGTH>(\n        header,\n        header_field_sequence,\n        header_field_name,\n    );\n\n    // check the header field is uninterrupted\n    let start_index = header_field_sequence.index + HEADER_FIELD_NAME_LENGTH + 1;\n    for i in 0..MAX_HEADER_FIELD_LENGTH {\n        // is it safe enough to cut this constraint cost in half by not checking lf? i think so\n        let index = start_index + i;\n        if (index < header_field_sequence.end_index()) {\n            assert(header.get_unchecked(index) != CR, \"Header field must not contain newlines\");\n        }\n    }\n}\n\n/**\n * constrain_header_field with checks for the last occurence of \"<\" inside the loop to save constraints\n */\npub fn constrain_header_field_detect_last_angle_bracket<let MAX_HEADER_LENGTH: u32, let MAX_HEADER_FIELD_LENGTH: u32, let HEADER_FIELD_NAME_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    header_field_sequence: Sequence,\n    header_field_name: [u8; HEADER_FIELD_NAME_LENGTH],\n) -> u32 {\n    // constrain beginning of header field\n    check_header_field_bounds::<MAX_HEADER_LENGTH, MAX_HEADER_FIELD_LENGTH, HEADER_FIELD_NAME_LENGTH>(\n        header,\n        header_field_sequence,\n        header_field_name,\n    );\n\n    // check the header field is uninterrupted\n    let mut last_angle_bracket = 0;\n    let start_index = header_field_sequence.index + HEADER_FIELD_NAME_LENGTH + 1;\n    for i in (HEADER_FIELD_NAME_LENGTH + 1)..MAX_HEADER_FIELD_LENGTH {\n        // is it safe enough to cut this constraint cost in half by not checking lf? i think so\n        let index = start_index + i;\n        if (index < header_field_sequence.end_index()) {\n            let byte = header.get_unchecked(index);\n            assert(byte != CR, \"Header field must not contain newlines\");\n            if byte == 0x3c {\n                last_angle_bracket = index;\n            }\n        }\n    }\n    last_angle_bracket\n}\n","path":"/Users/zhengyawen/nargo/github.com/zkemail/zkemail.nr/v0.4.0/lib/src/headers/mod.nr"},"67":{"source":"use crate::dkim::RSAPubkey;\nuse std::hash::pedersen_hash;\n\npub mod dkim;\npub mod headers;\npub mod masking;\npub mod partial_hash;\npub mod remove_soft_line_breaks;\n// mod macro;\nmod tests;\n\nglobal RSA_EXPONENT: u32 = 65537;\nglobal KEY_LIMBS_1024: u32 = 9;\nglobal KEY_LIMBS_2048: u32 = 18;\nglobal BODY_HASH_BASE64_LENGTH: u32 = 44;\nglobal CR: u8 = 0x0D;\nglobal LF: u8 = 0x0A;\nglobal MAX_DKIM_HEADER_FIELD_LENGTH: u32 = 300; // kinda arbitrary but gives > 100 chars for selector and domain\nglobal MAX_EMAIL_ADDRESS_LENGTH: u32 = 320; // derived via (https://datatracker.ietf.org/doc/html/rfc5321#section-4.5.3.1.1)\n\npub struct Sequence {\n    index: u32,\n    length: u32,\n}\n\nimpl Sequence {\n    pub fn end_index(self) -> u32 {\n        self.index + self.length\n    }\n}\n// allowable chars in an email address (js/src/utils:makeAllowableEmailCharsTable()\n// \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.-@\" = 1\n// \"<: \" = 2\n// \">\\r\\n\" = 3\nglobal EMAIL_ADDRESS_CHAR_TABLE: [u8; 123] = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 2, 0, 3, 0,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,\n    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n];\n\n/**\n * Default email verification function\n * @dev use #[zkemail] attribute macro to apply other functionality\n *\n * @param MAX_EMAIL_HEADER_LENGTH - The maximum length of the email header\n * @param KEY_LIMBS - The number of limbs in the RSA pubkey\n * @param header - The email header, 0-padded at end to the MAX_EMAIL_HEADER_LENGTH\n * @param pubkey - The DKIM RSA Public Key modulus and reduction parameter\n * @param signature - The DKIM RSA Signature\n */\npub fn verify_email<let MAX_EMAIL_HEADER_LENGTH: u32, let MAX_EMAIL_BODY_LENGTH: u32, // sometimes unused but needed for macro\nlet KEY_LIMBS: u32>(\n    header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH>,\n    pubkey: RSAPubkey<KEY_LIMBS_2048>,\n    signature: [Field; KEY_LIMBS_2048],\n) {\n    // ~ 86,553 constraints with 2048-bit RSA & 1024 bit max header length\n    // verify the dkim signature over the header\n    pubkey.verify_dkim_signature(header, signature);\n}\n","path":"/Users/zhengyawen/nargo/github.com/zkemail/zkemail.nr/v0.4.0/lib/src/lib.nr"},"108":{"source":"use crate::params::BigNumParams as P;\n\nuse crate::fns::{\n    expressions::evaluate_quadratic_expression,\n    unconstrained_helpers::{\n        __add_with_flags, __neg_with_flags, __sub_with_flags, __validate_gt_remainder,\n        __validate_in_field_compute_borrow_flags,\n    },\n    unconstrained_ops::{__div, __mul, __udiv_mod},\n};\n\n/**\n * In this file:\n *\n * conditional_select\n * assert_is_not_equal\n * eq\n * validate_in_field\n * validate_in_range\n * validate_quotient_in_range\n * validate_gt\n * neg\n * add\n * sub\n * mul\n * div\n * udiv_mod\n * udiv\n * umod\n */\n\n/**\n* @brief given an input seed, generate a pseudorandom BigNum value\n* @details we hash the input seed into `modulus_bits * 2` bits of entropy,\n* which is then reduced into a BigNum value\n* We use a hash function that can be modelled as a random oracle\n* This function *should* produce an output that is a uniformly randomly distributed value modulo BigNum::modulus()\n**/\npub(crate) fn derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let mut rolling_seed: [u8; SeedBytes + 1] = [0; SeedBytes + 1];\n    for i in 0..SeedBytes {\n        rolling_seed[i] = seed[i];\n        assert_eq(rolling_seed[i], seed[i]);\n    }\n\n    let mut hash_buffer: [u8; N * 2 * 15] = [0; N * 2 * 15];\n\n    let mut rolling_hash_fields: [Field; (SeedBytes / 31) + 1] = [0; (SeedBytes / 31) + 1];\n    let mut seed_ptr = 0;\n    for i in 0..(SeedBytes / 31) + 1 {\n        let mut packed: Field = 0;\n        for _ in 0..31 {\n            if (seed_ptr < SeedBytes) {\n                packed *= 256;\n                packed += seed[seed_ptr] as Field;\n                seed_ptr += 1;\n            }\n        }\n        rolling_hash_fields[i] = packed;\n    }\n\n    let compressed =\n        std::hash::poseidon2::Poseidon2::hash(rolling_hash_fields, (SeedBytes / 31) + 1);\n    let mut rolling_hash: [Field; 2] = [compressed, 0];\n\n    let num_hashes = (240 * N) / 254 + (((30 * N) % 32) != 0) as u32;\n    for i in 0..num_hashes - 1 {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        for j in 0..30 {\n            hash_buffer[i * 30 + j] = hash[j];\n        }\n        rolling_hash[1] += 1;\n    }\n\n    {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        let remaining_bytes = 30 * N - (num_hashes - 1) * 30;\n        for j in 0..remaining_bytes {\n            hash_buffer[(num_hashes - 1) * 30 + j] = hash[j];\n        }\n    }\n\n    let num_bits = MOD_BITS * 2;\n    let num_bytes = num_bits / 8 + ((num_bits % 8) != 0) as u32;\n\n    let bits_in_last_byte = num_bits as u8 % 8;\n    let last_byte_mask = (1 as u8 << bits_in_last_byte) - 1;\n    hash_buffer[num_bytes - 1] = hash_buffer[num_bytes - 1] & last_byte_mask;\n\n    let num_bigfield_chunks = (2 * N) / (N - 1) + (((2 * N) % (N - 1)) != 0) as u32;\n    let mut byte_ptr = 0;\n\n    // we want to convert our byte array into bigfield chunks\n    // each chunk has at most N-1 limbs\n    // to determine the exact number of chunks, we need the `!=` or `>` operator which is not avaiable when defining array sizes\n    // so we overestimate at 4\n    // e.g. if N = 20, then we have 40 limbs we want to reduce, but each bigfield chunk is 19 limbs, so we need 3\n    // if N = 2, we have 4 limbs we want to reduce but each bigfield chunk is only 1 limb, so we need 4\n    // max possible number of chunks is therefore 4\n    let mut bigfield_chunks: [[Field; N]; 4] = [[0; N]; 4];\n    for k in 0..num_bigfield_chunks {\n        let mut bigfield_limbs: [Field; N] = [0; N];\n        let mut num_filled_bytes = (k * 30);\n        let mut num_remaining_bytes = num_bytes - num_filled_bytes;\n        let mut num_remaining_limbs =\n            (num_remaining_bytes / 15) + (num_remaining_bytes % 15 > 0) as u32;\n        let mut more_than_N_minus_one_limbs = (num_remaining_limbs > (N - 1)) as u32;\n        let mut num_limbs_in_bigfield = more_than_N_minus_one_limbs * (N - 1)\n            + num_remaining_limbs * (1 - more_than_N_minus_one_limbs);\n\n        for j in 0..num_limbs_in_bigfield {\n            let mut limb: Field = 0;\n            for _ in 0..15 {\n                let need_more_bytes = (byte_ptr < num_bytes);\n                let mut byte = hash_buffer[byte_ptr];\n                limb *= (256 * need_more_bytes as Field + (1 - need_more_bytes as Field));\n                limb += byte as Field * need_more_bytes as Field;\n                byte_ptr += need_more_bytes as u32;\n            }\n            bigfield_limbs[num_limbs_in_bigfield - 1 - j] = limb;\n        }\n        bigfield_chunks[num_bigfield_chunks - 1 - k] = bigfield_limbs;\n    }\n\n    let mut bigfield_rhs_limbs: [Field; N] = [0; N];\n    bigfield_rhs_limbs[N - 1] = 1;\n    validate_in_range::<_, MOD_BITS>(bigfield_rhs_limbs);\n\n    let mut result: [Field; N] = [0; N];\n\n    for i in 0..num_bigfield_chunks {\n        let bigfield_lhs_limbs = bigfield_chunks[i];\n\n        result = mul(params, result, bigfield_rhs_limbs);\n        result = add(params, result, bigfield_lhs_limbs);\n    }\n    result\n}\n\n/**\n* @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n* @description should be cheaper than using an IF statement (TODO: check!)\n**/\npub(crate) fn conditional_select<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n    predicate: bool,\n) -> [Field; N] {\n    let mut result: [Field; N] = lhs;\n    for i in 0..N {\n        result[i] = (lhs[i] - rhs[i]) * predicate as Field + rhs[i];\n    }\n    result\n}\n\n/**\n    * @brief Validate self != other\n    * @details If A == B, then A == B mod N.\n    *          We can efficiently evaluate A == B mod N where N = circuit modulus\n    *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n    *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n    *          (todo: compute how tiny)\n    **/\npub(crate) fn assert_is_not_equal<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) {\n    let mut l: Field = 0;\n    let mut r: Field = 0;\n    let mut modulus_mod_n: Field = 0;\n    let two_pow_120: Field = 0x1000000000000000000000000000000;\n    let modulus = params.modulus;\n    for i in 0..N {\n        l *= two_pow_120;\n        r *= two_pow_120;\n        modulus_mod_n *= two_pow_120;\n        l += lhs[N - i - 1];\n        r += rhs[N - i - 1];\n        modulus_mod_n += modulus[N - i - 1];\n    }\n\n    // lhs can be either X mod N or P + X mod N\n    // rhs can be either Y mod N or P + Y mod N\n    // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n    let mut diff = l - r;\n    let mut target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n    assert(target != 0, \"asssert_is_not_equal fail\");\n}\n\npub(crate) fn eq<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> bool {\n    let diff = sub::<_, MOD_BITS>(params, lhs, rhs);\n    // if self == other, possible values of `diff` will be `p` or `0`\n    // (the subtract operator constrains diff to be < ceil(log(p)))\n    // TODO: can do this more efficiently via witngen in unconstrained functions?\n    let mut is_equal_modulus: bool = true;\n    let mut is_equal_zero: bool = true;\n    for i in 0..N {\n        is_equal_modulus = is_equal_modulus & (diff[i] == params.modulus[i]);\n        is_equal_zero = is_equal_zero & (diff[i] == 0);\n    }\n    is_equal_modulus | is_equal_zero\n}\n\npub(crate) fn validate_in_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) {\n    // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n    let mut p_minus_self: [Field; N] = [0; N];\n    let modulus: [Field; N] = params.modulus;\n    for i in 0..N {\n        p_minus_self[i] = modulus[i] - val[i];\n    }\n    let borrow_flags = unsafe { __validate_in_field_compute_borrow_flags(params, val) };\n    let two_pow_120: Field = 0x1000000000000000000000000000000;\n    p_minus_self[0] += borrow_flags[0] as Field * two_pow_120;\n    for i in 1..N - 1 {\n        p_minus_self[i] += (borrow_flags[i] as Field * two_pow_120 - borrow_flags[i - 1] as Field);\n    }\n    p_minus_self[N - 1] -= borrow_flags[N - 2] as Field;\n    let mut compare = val;\n    compare = p_minus_self;\n    validate_in_range::<_, MOD_BITS>(compare);\n}\n\n/**\n* @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n**/\npub(crate) fn validate_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N - 1) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120)>();\n}\n\n/**\n* @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n* @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n*              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n*              Why is this?\n*              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n*                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n*                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n*              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n*\n*              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n*              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n**/\npub(crate) fn validate_quotient_in_range<let N: u32, let MOD_BITS: u32>(limbs: [Field; N]) {\n    for i in 0..(N) {\n        limbs[i].assert_max_bit_size::<120>();\n    }\n    // Note: replace magic number 6 with definition\n    limbs[N - 1].assert_max_bit_size::<MOD_BITS - ((N - 1) * 120) + 6>();\n}\n\n// validate that lhs - rhs does not underflow i.e. lhs > rhs\npub(crate) fn validate_gt<let N: u32, let MOD_BITS: u32>(lhs: [Field; N], rhs: [Field; N]) {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    // a - b = r\n    // p + a - b - r = 0\n    let (result, carry_flags, borrow_flags) = unsafe { __validate_gt_remainder(lhs, rhs) };\n    validate_in_range::<_, MOD_BITS>(result);\n\n    let borrow_shift = 0x1000000000000000000000000000000;\n    let carry_shift = 0x1000000000000000000000000000000;\n\n    let mut addend: [Field; N] = [0; N];\n    let result_limb = lhs[0] - rhs[0] + addend[0] - result[0] - 1\n        + (borrow_flags[0] as Field * borrow_shift)\n        - (carry_flags[0] as Field * carry_shift);\n    assert(result_limb == 0);\n\n    for i in 1..N - 1 {\n        let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - borrow_flags[i - 1] as Field\n            + carry_flags[i - 1] as Field\n            + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n        assert(result_limb == 0);\n    }\n\n    let result_limb = lhs[N - 1] - rhs[N - 1] + addend[N - 1]\n        - result[N - 1]\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n}\n\npub(crate) fn neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    let (result, borrow_flags) = unsafe { __neg_with_flags(params, val) };\n    validate_in_range::<_, MOD_BITS>(result);\n    let modulus = params.modulus;\n    let borrow_shift = 0x1000000000000000000000000000000;\n    let result_limb = modulus[0] - val[0] - result[0] + (borrow_flags[0] as Field * borrow_shift);\n    assert(result_limb == 0);\n    for i in 1..N - 1 {\n        let result_limb = modulus[i] - val[i] - result[i] - borrow_flags[i - 1] as Field\n            + (borrow_flags[i] as Field * borrow_shift);\n        assert(result_limb == 0);\n    }\n    let result_limb = modulus[N - 1] - val[N - 1] - result[N - 1] - borrow_flags[N - 2] as Field;\n    assert(result_limb == 0);\n    result\n}\n\npub(crate) fn add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    let (result, carry_flags, borrow_flags, overflow_modulus) =\n        unsafe { __add_with_flags(params, lhs, rhs) };\n    validate_in_range::<_, MOD_BITS>(result);\n    let modulus = params.modulus;\n    let borrow_shift = 0x1000000000000000000000000000000;\n    let carry_shift = 0x1000000000000000000000000000000;\n\n    let mut subtrahend: [Field; N] = [0; N];\n    if (overflow_modulus) {\n        subtrahend = modulus;\n    }\n    let result_limb = lhs[0] + rhs[0] - subtrahend[0] - result[0]\n        + (borrow_flags[0] as Field * borrow_shift)\n        - (carry_flags[0] as Field * carry_shift);\n    assert(result_limb == 0);\n    for i in 1..N - 1 {\n        let result_limb = lhs[i] + rhs[i] - subtrahend[i] - result[i] - borrow_flags[i - 1] as Field\n            + carry_flags[i - 1] as Field\n            + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n        assert(result_limb == 0);\n    }\n    let result_limb = lhs[N - 1] + rhs[N - 1]\n        - subtrahend[N - 1]\n        - result[N - 1]\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n    result\n}\n\npub(crate) fn sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    // a - b = r\n    // p + a - b - r = 0\n    let (result, carry_flags, borrow_flags, underflow) =\n        unsafe { __sub_with_flags(params, lhs, rhs) };\n    validate_in_range::<_, MOD_BITS>(result);\n    let modulus = params.modulus;\n    let borrow_shift = 0x1000000000000000000000000000000;\n    let carry_shift = 0x1000000000000000000000000000000;\n\n    let mut addend: [Field; N] = [0; N];\n    if (underflow) {\n        addend = modulus;\n    }\n    let result_limb = lhs[0] - rhs[0] + addend[0] - result[0]\n        + (borrow_flags[0] as Field * borrow_shift)\n        - (carry_flags[0] as Field * carry_shift);\n    assert(result_limb == 0);\n    for i in 1..N - 1 {\n        let result_limb = lhs[i] - rhs[i] + addend[i] - result[i] - borrow_flags[i - 1] as Field\n            + carry_flags[i - 1] as Field\n            + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n        assert(result_limb == 0);\n    }\n    let result_limb = lhs[N - 1] - rhs[N - 1] + addend[N - 1]\n        - result[N - 1]\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n    result\n}\n\n// Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n//       via evaluate_quadratic_expression\n// e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n//      will create much fewer constraints than calling `mul` and `add` directly\npub(crate) fn mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let result = unsafe { __mul::<_, MOD_BITS>(params, lhs, rhs) };\n    evaluate_quadratic_expression(\n        params,\n        [[lhs]],\n        [[false]],\n        [[rhs]],\n        [[false]],\n        [result],\n        [true],\n    );\n    result\n}\n\n// Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\npub(crate) fn div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    assert(\n        params.has_multiplicative_inverse,\n        \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\",\n    );\n    let result = unsafe { __div::<_, MOD_BITS>(params, lhs, rhs) };\n    evaluate_quadratic_expression(\n        params,\n        [[result]],\n        [[false]],\n        [[rhs]],\n        [[false]],\n        [lhs],\n        [true],\n    );\n    result\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor \n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) fn udiv_mod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let (quotient, remainder) = unsafe { __udiv_mod(numerator, divisor) };\n\n    // self / divisor = quotient rounded\n    // quotient * divisor + remainder - self = 0\n    evaluate_quadratic_expression(\n        params,\n        [[quotient]],\n        [[false]],\n        [[divisor]],\n        [[false]],\n        [numerator, remainder],\n        [true, false],\n    );\n    // we need (remainder < divisor)\n    // implies (divisor - remainder > 0)\n    validate_gt::<_, MOD_BITS>(divisor, remainder);\n    (quotient, remainder)\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor \n*\n* i.e. return param is floor(numerator / divisor)\n**/\npub(crate) fn udiv<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).0\n}\n\n/**\n* @brief udiv_mod performs integer modular reduction\n*\n* i.e. 1. numerator % divisor = return value\n**/\npub(crate) fn umod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).1\n}\n\n","path":"/Users/zhengyawen/nargo/github.com/noir-lang/noir-bignum/v0.5.0/src/fns/constrained_ops.nr"},"109":{"source":"use crate::utils::split_bits;\n\nuse crate::fns::{\n    constrained_ops::validate_quotient_in_range, unconstrained_helpers::__barrett_reduction,\n};\nuse crate::params::BigNumParams as P;\n\n/**\n * In this file:\n *\n * __compute_quadratic_expression_with_borrow_flags\n * __add_linear_expression\n * __compute_quadratic_expression_product\n * __compute_quadratic_expression\n * evaluate_quadratic_expression\n */\n\n/**\n* @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n* @description The expression is of the form:\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n* For example, when computing the product a * b - q * p = 0, it is possible that:\n*      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n*      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n* In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n* In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n*\n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\nunconstrained fn __compute_quadratic_expression_with_borrow_flags<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N], [Field; 2 * N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut mulout_p = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut mulout_n: [Field; 2 * N] = [0; 2 * N];\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout_p, 2 * N);\n\n    let modulus: [Field; N] = params.modulus;\n    let modulus_bits = MOD_BITS;\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        modulus_bits,\n        modulus,\n        params.modulus_u60_x4,\n    );\n    assert(remainder == [0; N]);\n\n    for i in 0..N {\n        for j in 0..N {\n            mulout_n[i + j] += quotient[i] * modulus[j];\n        }\n    }\n\n    // compute borrow flags from mulout_p and mulout_n\n    let mut borrow_flags: [Field; 2 * N] = [0; 2 * N];\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    let two_pow_120: Field = 0x1000000000000000000000000000000;\n    let downshift: Field = 1 / two_pow_120;\n\n    // determine whether we need to borrow from more significant limbs.\n    // initial limb is \"simple\" comparison operation\n    // TODO: check how expensive `lt` operator is w.r.t. witness generation\n    borrow_flags[0] = mulout_p[0].lt(mulout_n[0]) as Field;\n    // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n    // and there is nothing to borrow against for the final limb.\n    let mut hi_bits = (mulout_p[0] - mulout_n[0] + (borrow_flags[0] * borrow_shift)) * downshift;\n    for i in 1..(N + N - 2) {\n        // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n        // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n        //     * downshift;\n        mulout_p[i] += hi_bits;\n\n        // determine whether negative limb values are greater than positive limb values\n        let underflow: Field =\n            mulout_p[i].lt(mulout_n[i] + (borrow_flags[i - 1] * borrow_carry)) as Field;\n        borrow_flags[i] = underflow;\n\n        hi_bits = (\n            mulout_p[i] - mulout_n[i] + (borrow_flags[i] * borrow_shift)\n                - (borrow_flags[i - 1] * borrow_carry)\n        )\n            * downshift;\n    }\n\n    (quotient, remainder, borrow_flags)\n}\n\n/**\n* @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n**/\n// NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n// To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n// We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n// Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n// Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\nunconstrained fn __add_linear_expression<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n    flags: [bool; M],\n) -> ([Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut sum: [Field; N] = [0; N];\n    // TODO: ugly! Will fail if input array is empty\n    let modulus2: [Field; N] = params.double_modulus;\n    for i in 0..M {\n        if (flags[i]) {\n            for j in 0..N {\n                sum[j] = sum[j] + modulus2[j] - x[i][j];\n                // assert(x[i][j].lt(modulus2[j]));\n            }\n        } else {\n            for j in 0..N {\n                sum[j] = sum[j] + x[i][j];\n            }\n        }\n    }\n    // problem if we normalize when used in computing quotient\n    sum\n}\n\n/**\n* @brief computes the limb products of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\nunconstrained fn __compute_quadratic_expression_product<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> [Field; 2 * N] {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut lhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut rhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut add: [Field; N] = [0; N];\n\n    for i in 0..NUM_PRODUCTS {\n        lhs[i] = __add_linear_expression(params, lhs_terms[i], lhs_flags[i]);\n        rhs[i] = __add_linear_expression(params, rhs_terms[i], rhs_flags[i]);\n    }\n\n    let add: [Field; N] = __add_linear_expression(params, linear_terms, linear_flags);\n\n    let mut mulout: [Field; 2 * N] = [0; 2 * N];\n\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                mulout[i + j] += (lhs[k][i] * rhs[k][j]);\n            }\n        }\n        mulout[i] += add[i];\n    }\n    mulout\n}\n\n/**\n* @brief computes the quotient/remainder of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\npub(crate) unconstrained fn __compute_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([Field; N], [Field; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mulout = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout, 2 * N);\n\n    // size 4\n    // a[3] * b[3] = a[6] = 7\n    // TODO: ugly! Will fail if input slice is empty\n    let k = MOD_BITS;\n\n    let (quotient, remainder) = __barrett_reduction(\n        relation_result,\n        params.redc_param,\n        k,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    let mut q = quotient;\n    let mut r = remainder;\n    (q, r)\n}\n\n/**\n* @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n* @description The expression is of the form (when evaluated as an integer relation):\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* Note: this method requires the remainder term of the expression to be ZERO\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The expensive parts of this algorithm are the following:\n*      1. evaluating the limb products required to compute `lhs * rhs`\n*      2. applying range constraints to validate the result is 0\n*\n* Range constraints are needed for the following reason:\n* When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n* Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n* Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n* To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n* (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n* To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n* We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n* TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n* I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n* TODO: explain why we apply a 126-bit range check, this feels like a magic number\n* (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n* TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n* \n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\npub(crate) fn evaluate_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[Field; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[Field; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[Field; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) {\n    // use an unconstrained function to compute the value of the quotient\n    let (quotient, _, borrow_flags): ([Field; N], [Field; N], [Field; 2 * N]) = unsafe {\n        __compute_quadratic_expression_with_borrow_flags::<_, MOD_BITS, _, _, _, _>(\n            params,\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags,\n        )\n    };\n    // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n    // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n    validate_quotient_in_range::<_, MOD_BITS>(quotient);\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    // (should be a compile-time check...unconstrained function?)\n    // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n    let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t4: [Field; N] = [0; N];\n\n    // TODO: this is super nasty as it requires a multiplication\n    let double_modulus: [Field; N] = params.double_modulus;\n    for k in 0..NUM_PRODUCTS {\n        for i in 0..N {\n            for j in 0..LHS_N {\n                // note: if is_negative is not known at comptime this is very expensive\n                if (lhs_flags[k][j]) {\n                    t0[k][i] -= lhs_terms[k][j][i];\n                    t0[k][i] += double_modulus[i];\n                } else {\n                    t0[k][i] += lhs_terms[k][j][i];\n                }\n            }\n            for j in 0..RHS_N {\n                if (rhs_flags[k][j]) {\n                    t1[k][i] -= rhs_terms[k][j][i];\n                    t1[k][i] += double_modulus[i];\n                } else {\n                    t1[k][i] += rhs_terms[k][j][i];\n                }\n            }\n        }\n    }\n    for i in 0..N {\n        for j in 0..ADD_N {\n            if (linear_flags[j]) {\n                t4[i] -= linear_terms[j][i];\n                t4[i] += double_modulus[i];\n            } else {\n                t4[i] += linear_terms[j][i];\n            }\n        }\n    }\n\n    // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n    // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n    // so that we can ensure that no limbs will underflow for an honest Prover\n    let mut product_limbs: [Field; 2 * N] = [0; 2 * N];\n\n    // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n    // TODO: this is super nasty as it requires a multiplication\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                if k == 0 {\n                    let new_term = t0[k][i] * t1[k][j] - quotient[i] * params.modulus[j];\n                    std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                    product_limbs[i + j] += new_term;\n                } else {\n                    product_limbs[i + j] += t0[k][i] * t1[k][j];\n                }\n            }\n            if (NUM_PRODUCTS == 0) {\n                product_limbs[i + j] -= quotient[i] * params.modulus[j];\n            }\n        }\n        product_limbs[i] += t4[i];\n    }\n\n    // each limb product represents the sum of 120-bit products.\n    // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n    // where no more than 64 limb products are summed together.\n    // TODO: check in unconstrained function that this condition is satisfied\n    // TODO: define trade-offs regarding the value of borrow_shift\n    // (the larger the value, the greater the range check that is required on product_limbs)\n    // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n    // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n    //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n    // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n    borrow_flags[0].assert_max_bit_size::<1>();\n    product_limbs[0] += borrow_flags[0] * borrow_shift;\n    for i in 1..(N + N - 2) {\n        borrow_flags[i].assert_max_bit_size::<1>();\n        product_limbs[i] += (borrow_flags[i] * borrow_shift - borrow_flags[i - 1] * borrow_carry);\n    }\n    product_limbs[N + N - 2] -= borrow_flags[N + N - 3] * borrow_carry;\n\n    // Final step: Validate `product_limbs` represents the integer value `0`\n    // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n    // i.e. we need to do the following for each limb `i`:\n    //      1. validate the limb's low-120 bits equals zero\n    //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n    //      3. add the carry into limb `i+1`\n    // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n    // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n    // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n    //  where k is the number of bits in the prime field)\n    // We then add the result into the next limb and repeat.\n    let hi_shift: Field = 0x1000000000000000000000000000000;\n    let hi_downshift: Field = 1 / hi_shift;\n    for i in 0..N + N - 2 {\n        product_limbs[i] *= hi_downshift;\n        std::as_witness(product_limbs[i]);\n        product_limbs[i].assert_max_bit_size::<126>(); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n        product_limbs[i + 1] += product_limbs[i];\n    }\n    // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n    assert(product_limbs[N + N - 2] == 0);\n}\n","path":"/Users/zhengyawen/nargo/github.com/noir-lang/noir-bignum/v0.5.0/src/fns/expressions.nr"},"111":{"source":"/**\n* @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n* @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n*               is precisely large enough to cover MOD_BITS\n* @param x: input byte array\n**/\npub(crate) fn from_be_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    x: [u8; NBytes],\n) -> [Field; N] {\n    let num_bits = NBytes * 8;\n    assert(num_bits >= MOD_BITS);\n    assert(num_bits - MOD_BITS < 8);\n    let mut result = [0; N];\n\n    let excess_bytes = N * 15 - NBytes;\n    let final_limb_bytes = 15 - excess_bytes;\n    let mut limb: Field = 0;\n    let mut k = 0;\n    for _j in 0..final_limb_bytes {\n        limb *= 256;\n        limb += x[k] as Field;\n        k += 1;\n    }\n    result[N - 1] = limb;\n\n    for i in 1..N {\n        let mut limb: Field = 0;\n        for _j in 0..15 {\n            limb *= 256;\n            limb += x[k] as Field;\n            k += 1;\n        }\n        result[N - i - 1] = limb;\n    }\n\n    let most_significant_byte: Field = x[0] as Field;\n\n    most_significant_byte.assert_max_bit_size::<8 - (NBytes * 8 - MOD_BITS)>();\n    result\n}\n\npub(crate) fn to_le_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    val: [Field; N],\n) -> [u8; NBytes] {\n    let nbytes = (MOD_BITS / 8) + (MOD_BITS % 8 != 0) as u32;\n    assert(nbytes <= NBytes);\n\n    let mut result: [u8; NBytes] = [0; NBytes];\n    for i in 0..N - 1 {\n        let limb_bytes: [u8; 15] = val[i].to_le_bytes();\n        for j in 0..15 {\n            result[i * 15 + j] = limb_bytes[j];\n        }\n    }\n    let last_limb_bytes: [u8; 15] = val[N - 1].to_le_bytes();\n    let num_last_bytes = (NBytes - (N - 1) * 15);\n    for i in 0..num_last_bytes {\n        result[(N - 1) * 15 + i] = last_limb_bytes[i];\n    }\n    result\n}\n","path":"/Users/zhengyawen/nargo/github.com/noir-lang/noir-bignum/v0.5.0/src/fns/serialization.nr"},"112":{"source":"use crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\nuse crate::fns::unconstrained_ops::{__add, __eq, __mul, __neg, __one, __pow};\nuse crate::params::BigNumParams as P;\n\nglobal TWO_POW_60: u64 = 0x1000000000000000;\n\n/**\n * In this file:\n *\n * __validate_in_field_compute_borrow_flags\n * __validate_gt_remainder\n * __neg_with_flags\n * __add_with_flags\n * __sub_with_flags\n * __barrett_reduction\n * __tonelli_shanks_sqrt\n */\n\npub(crate) unconstrained fn __validate_in_field_compute_borrow_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [bool; N] {\n    let mut flags: [bool; N] = [false; N];\n    let modulus: [Field; N] = params.modulus;\n    flags[0] = modulus[0].lt(val[0]);\n    for i in 1..N - 1 {\n        flags[i] = modulus[i].lt(val[i] + flags[i - 1] as Field);\n    }\n    flags\n}\n\npub(crate) unconstrained fn __validate_gt_remainder<let N: u32>(\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N]) {\n    let a_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let mut b_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let underflow = b_u60.gte(a_u60);\n    b_u60 += U60Repr::one();\n    assert(underflow == false, \"BigNum::validate_gt check fails\");\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            if (carry & borrow == 1) {\n                carry = 0;\n                borrow = 0;\n            }\n            carry_flags[i / 2] = carry as bool;\n            borrow_flags[i / 2] = borrow as bool;\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags)\n}\n\npub(crate) unconstrained fn __neg_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> ([Field; N], [bool; N]) {\n    let x_u60: U60Repr<N, 2> = U60Repr::from(val);\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut borrow_in: u64 = 0;\n\n    let mut borrow_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let sub_term = x_u60.limbs[i] + borrow_in;\n        let borrow = (sub_term > params.modulus_u60.limbs[i]) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + params.modulus_u60.limbs[i] - sub_term;\n\n        borrow_in = borrow;\n        if ((i & 1) == 1) {\n            borrow_flags[i / 2] = borrow as bool;\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, borrow_flags)\n}\n\npub(crate) unconstrained fn __add_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let b_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n    let add_u60 = a_u60 + b_u60;\n\n    let overflow = add_u60.gte(params.modulus_u60);\n\n    let mut subtrahend_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    if overflow {\n        subtrahend_u60 = params.modulus_u60;\n    }\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + b_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = subtrahend_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            let idx = (i - 1) / 2;\n            if (carry & borrow == 1) {\n                carry = 0;\n                borrow = 0;\n            }\n            carry_flags[idx] = carry as bool;\n            borrow_flags[idx] = borrow as bool;\n        }\n    }\n    let result = U60Repr::into(result_u60);\n\n    (result, carry_flags, borrow_flags, overflow)\n}\n\npub(crate) unconstrained fn __sub_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [bool; N], [bool; N], bool) {\n    let a_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let b_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let underflow = b_u60.gte(a_u60 + U60Repr::one());\n\n    let addend_u60: U60Repr<N, 2> = if underflow {\n        params.modulus_u60\n    } else {\n        U60Repr { limbs: [0; 2 * N] }\n    };\n    let mut result_u60: U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n    let mut carry_in: u64 = 0;\n    let mut borrow_in: u64 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..2 * N {\n        let mut add_term: u64 = a_u60.limbs[i] + addend_u60.limbs[i] + carry_in;\n        let mut carry = (add_term >= TWO_POW_60) as u64;\n        add_term -= carry * TWO_POW_60;\n        carry_in = carry;\n\n        let sub_term = b_u60.limbs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u64;\n        result_u60.limbs[i] = borrow * TWO_POW_60 + add_term - sub_term;\n        borrow_in = borrow;\n\n        if ((i & 1) == 1) {\n            if (carry & borrow == 1) {\n                carry = 0;\n                borrow = 0;\n            }\n            carry_flags[i / 2] = carry as bool;\n            borrow_flags[i / 2] = borrow as bool;\n        }\n    }\n    let result = U60Repr::into(result_u60);\n    (result, carry_flags, borrow_flags, underflow)\n}\n\n/**\n * @brief BARRETT_REDUCTION_OVERFLOW_BITS defines how large an input to barrett reduction can be\n * @details maximum value = modulus^2 <<BARRETT_REDUCTION_OVERFLOW_BITS\n *          see __barrett_reduction for more details\n **/\ncomptime global BARRETT_REDUCTION_OVERFLOW_BITS: u32 = 4;\n\npub(crate) unconstrained fn __barrett_reduction<let N: u32>(\n    x: [Field; 2 * N],\n    redc_param: [Field; N],\n    k: u32,\n    modulus: [Field; N],\n    modulus_u60: U60Repr<N, 4>,\n) -> ([Field; N], [Field; N]) {\n    // for each i in 0..(N + N), adds x[i] * redc_param[j] to mulout[i + j] for each j in 0..N\n    let mut mulout: [Field; 3 * N] = [0; 3 * N];\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout[i + j] += x[i] * redc_param[j];\n        }\n    }\n\n    mulout = split_bits::__normalize_limbs(mulout, 3 * N - 1);\n    let mulout_u60: U60Repr<N, 6> = U60Repr::new(mulout);\n\n    // When we apply the barrett reduction, the maximum value of the output will be\n    // <= p * (1 + x/2^{2k})\n    // where p = modulus,\n    //       x = reduction input\n    // if x > p * p, we need k to be larger than modulus_bits()\n    // we hardcode k = 4, which means that the maximum value of x is approx. 16 * p * p\n    // this should be larger than most values put into `evaluate_quadratic_expression`\n    // TODO: try and detect cases where x might be too large at comptime\n    // N.B. BARRETT_REDUCTION_OVERFLOW_BITS affects how `redc_param` is generated.\n    // `redc_param` = 2^{modulus_bits() * 2 + BARRETT_REDUCTION_OVERFLOW_BITS} / modulus\n    // NOTE: very niche edge case error that we need to be aware of:\n    //       N must be large enough to cover the modulus *plus* BARRETT_REDUCTION_OVERFLOW_BITS\n    //       i.e. a 359-bit prime needs (I think) 4 limbs to represent or we may overflow when calling __barrett_reduction\n    let mut quotient_u60 = mulout_u60.shr((k + k + BARRETT_REDUCTION_OVERFLOW_BITS));\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient_full should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient_full: [Field; 3 * N] = quotient_u60.into_field_array();\n\n    // quotient_mul_modulus_normalized can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus_normalized: [Field; 2 * N] = [0; 2 * N];\n\n    // First, accumulate the products into quotient_mul_modulus_normalized\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus_normalized[i + j] += partial_quotient_full[i] * modulus[j];\n        }\n    }\n\n    // Then, split the accumulated values and propagate higher bits\n    for i in 0..(N + N) {\n        let (lo, hi) = split_bits::split_120_bits(quotient_mul_modulus_normalized[i]);\n        quotient_mul_modulus_normalized[i] = lo;\n\n        // Propagate higher bits to the next index\n        // TODO: what is faster, leaving this if statement in or out?\n        // (array is size-1 too large so we can tolerate adding 0 into max element)\n        if (i + 1 < N + N) {\n            quotient_mul_modulus_normalized[i + 1] += hi;\n        }\n    }\n\n    let quotient_mul_modulus_u60: U60Repr<N, 4> = U60Repr::new(quotient_mul_modulus_normalized);\n    // convert the input into U60Repr\n    let x_u60: U60Repr<N, 4> = U60Repr::new(x);\n    let mut remainder_u60 = x_u60 - quotient_mul_modulus_u60;\n    // barrett reduction is quircky so might need to remove a few modulus_u60 from the remainder\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    } else {}\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    }\n\n    let q: [Field; N] = U60Repr::into(quotient_u60);\n    let r: [Field; N] = U60Repr::into(remainder_u60);\n\n    (q, r)\n}\n\n/**\n* @brief compute the log of the size of the primitive root\n* @details find the maximum value k where x^k = 1, where x = primitive root\n*          This is needed for our Tonelli-Shanks sqrt algorithm\n**/\npub(crate) unconstrained fn __primitive_root_log_size<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> u32 {\n    let mut target: U60Repr<N, 2> = params.modulus_u60 - U60Repr::one();\n    let mut result: u32 = 0;\n    for _ in 0..MOD_BITS {\n        let lsb_is_one = (target.limbs[0] & 1) == 1;\n        if (!lsb_is_one) {\n            result += 1;\n            target.shr1();\n        } else {\n            break;\n        }\n    }\n    result\n}\n\n/**\n* @brief inner loop fn for `find_multiplive_generator`\n* @details recursive function to get around the lack of a `while` keyword\n**/\nunconstrained fn __recursively_find_multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    target: [Field; N],\n    p_minus_one_over_two: [Field; N],\n) -> (bool, [Field; N]) {\n    let exped = __pow(params, target, p_minus_one_over_two);\n    let one: [Field; N] = __one();\n    let neg_one = __neg(params, one);\n    let found = __eq(exped, neg_one);\n    let mut result: (bool, [Field; N]) = (found, target);\n    if (!found) {\n        let _target = unsafe { __add(params, target, one) };\n        result = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n            params,\n            _target,\n            p_minus_one_over_two,\n        );\n    }\n    result\n}\n\n/**\n* @brief find multiplicative generator `g` where `g` is the smallest value that is not a quadratic residue\n*        i.e. smallest g where g^2 = -1\n* @note WARNING if multiplicative generator does not exist, this function will enter an infinite loop!\n**/\npub(crate) unconstrained fn __multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> [Field; N] {\n    let mut target: [Field; N] = __one();\n    let p_minus_one_over_two: U60Repr<N, 2> = (params.modulus_u60 - U60Repr::one()).shr(1);\n    let p_minus_one_over_two: [Field; N] = U60Repr::into(p_minus_one_over_two);\n    let (_, target) = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n        params,\n        target,\n        p_minus_one_over_two,\n    );\n    target\n}\n\npub(crate) unconstrained fn __tonelli_shanks_sqrt_inner_loop_check<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    t2m: [Field; N],\n    i: u32,\n) -> u32 {\n    let one: [Field; N] = __one();\n    let is_one = __eq(t2m, one);\n    let mut result = i;\n    if (!is_one) {\n        let t2m = __mul::<_, MOD_BITS>(params, t2m, t2m);\n        let i = i + 1;\n        result = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, i);\n    }\n    result\n}\n","path":"/Users/zhengyawen/nargo/github.com/noir-lang/noir-bignum/v0.5.0/src/fns/unconstrained_helpers.nr"},"113":{"source":"use crate::fns::constrained_ops::derive_from_seed;\nuse crate::fns::unconstrained_helpers::{\n    __barrett_reduction, __multiplicative_generator, __primitive_root_log_size,\n    __tonelli_shanks_sqrt_inner_loop_check,\n};\nuse crate::params::BigNumParams as P;\nuse crate::utils::split_bits;\nuse crate::utils::u60_representation::U60Repr;\n\n/**\n * In this file:\n *\n * __one\n * __derive_from_seed\n * __eq\n * __is_zero\n * __neg\n * __add\n * __sub\n * __mul_with_quotient\n * __mul\n * __div\n * __udiv_mod\n * __invmod\n * __pow\n * __batch_invert\n * __batch_invert_slice\n */\n\npub(crate) unconstrained fn __one<let N: u32>() -> [Field; N] {\n    let mut limbs: [Field; N] = [0; N];\n    limbs[0] = 1;\n    limbs\n}\n\n/// Deterministically derives a big_num from a seed value.\n///\n/// Takes a seed byte array and generates a big_num in the range [0, modulus-1].\n///\n/// ## Value Parameters\n///\n/// - `params`: The BigNum parameters containing modulus and reduction info\n/// - `seed`:  Input seed bytes to derive from.\n///\n/// ## Returns\n///\n///  An array of field elements derived from the seed (the limbs of the big_num)\npub(crate) unconstrained fn __derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [Field; N] {\n    let out = derive_from_seed::<N, MOD_BITS, SeedBytes>(params, seed);\n    out\n}\n\npub(crate) unconstrained fn __eq<let N: u32>(lhs: [Field; N], rhs: [Field; N]) -> bool {\n    lhs == rhs\n}\n\npub(crate) unconstrained fn __is_zero<let N: u32>(limbs: [Field; N]) -> bool {\n    let mut result: bool = true;\n    for i in 0..N {\n        result = result & (limbs[i] == 0);\n    }\n\n    result\n}\n\n/**\n* @brief given an input `x`, compute `2p - x` (unconstrained)\n*\n* @description we subtract the input from double the modulus, because all constrained BigNum operations\n*              only guarantee that the output is in the range [0, ceil(log2(p))].\n*              I.E. the input may be larger than the modulus `p`.\n*              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n*              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n*              because such a check is expensive and usually unneccesary.\n*/\npub(crate) unconstrained fn __neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [Field; N],\n) -> [Field; N] {\n    let f: [Field; N] = limbs;\n    let x_u60: U60Repr<N, 2> = U60Repr::from(f);\n    U60Repr::into(params.modulus_u60 - x_u60)\n}\n\npub(crate) unconstrained fn __add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let x_u60: U60Repr<N, 2> = U60Repr::from(lhs);\n    let y_u60: U60Repr<N, 2> = U60Repr::from(rhs);\n\n    let mut z_u60 = x_u60 + y_u60;\n\n    if z_u60.gte(params.modulus_u60) {\n        z_u60 = z_u60 - params.modulus_u60;\n    }\n    U60Repr::into(z_u60)\n}\n\n/**\n* @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n* @description see `__neg` for why we use 2p instead of p\n**/\npub(crate) unconstrained fn __sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    __add(params, lhs, __neg(params, rhs))\n}\n\npub(crate) unconstrained fn __mul_with_quotient<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut mul: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..N {\n        for j in 0..N {\n            mul[i + j] += lhs[i] * rhs[j];\n        }\n    }\n    let to_reduce = split_bits::__normalize_limbs(mul, 2 * N);\n    let (q, r) = __barrett_reduction(\n        to_reduce,\n        params.redc_param,\n        MOD_BITS,\n        params.modulus,\n        params.modulus_u60_x4,\n    );\n\n    (q, r)\n}\n\npub(crate) unconstrained fn __mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [Field; N],\n    rhs: [Field; N],\n) -> [Field; N] {\n    let (_, b) = __mul_with_quotient::<_, MOD_BITS>(params, lhs, rhs);\n    b\n}\n\npub(crate) unconstrained fn __div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> [Field; N] {\n    let inv_divisor = __invmod::<_, MOD_BITS>(params, divisor);\n    __mul::<_, MOD_BITS>(params, numerator, inv_divisor)\n}\n\n/**\n* @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) unconstrained fn __udiv_mod<let N: u32>(\n    numerator: [Field; N],\n    divisor: [Field; N],\n) -> ([Field; N], [Field; N]) {\n    let mut quotient_u60: U60Repr<N, 2> = U60Repr::from([0; N]);\n    let mut remainder_u60: U60Repr<N, 2> = U60Repr::from(numerator);\n\n    let mut divisor_u60: U60Repr<N, 2> = U60Repr::from(divisor);\n    let b = divisor_u60;\n\n    let mut bit_difference = remainder_u60.get_msb() - divisor_u60.get_msb();\n\n    let mut accumulator_u60: U60Repr<N, 2> = U60Repr::one();\n    divisor_u60 = divisor_u60.shl(bit_difference);\n    accumulator_u60 = accumulator_u60.shl(bit_difference);\n\n    if (divisor_u60.gte(remainder_u60 + U60Repr::one())) {\n        divisor_u60.shr1();\n        accumulator_u60.shr1();\n    }\n    for _ in 0..(N * 120) {\n        if (remainder_u60.gte(b) == false) {\n            break;\n        }\n\n        // we've shunted 'divisor' up to have the same bit length as our remainder.\n        // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n        if (remainder_u60.gte(divisor_u60)) {\n            remainder_u60 -= divisor_u60;\n            // we can use OR here instead of +, as\n            // accumulator is always a nice power of two\n            quotient_u60 = quotient_u60 + accumulator_u60;\n        }\n        divisor_u60.shr1(); // >>= 1;\n        accumulator_u60.shr1(); //  >>= 1;\n    }\n\n    (U60Repr::into(quotient_u60), U60Repr::into(remainder_u60))\n}\n\npub(crate) unconstrained fn __invmod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n) -> [Field; N] {\n    let one: [Field; N] = __one::<N>();\n    let one_u60: U60Repr<N, 2> = U60Repr::from(one);\n    let exp_u60 = params.modulus_u60 - (one_u60 + one_u60);\n    let exp = U60Repr::into(exp_u60);\n    __pow::<_, MOD_BITS>(params, val, exp)\n}\n\npub(crate) unconstrained fn __pow<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [Field; N],\n    exponent: [Field; N],\n) -> [Field; N] {\n    let x: U60Repr<N, 2> = U60Repr::from(exponent);\n\n    let num_bits = MOD_BITS + 1;\n\n    let mut accumulator: [Field; N] = __one::<N>();\n\n    for i in 0..num_bits {\n        accumulator = __mul::<_, MOD_BITS>(params, accumulator, accumulator);\n        if x.get_bit(num_bits - i - 1) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, val);\n        }\n    }\n    accumulator\n}\n\npub(crate) unconstrained fn __batch_invert<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]; M],\n) -> [[Field; N]; M] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut result: [[Field; N]; M] = [[0; N]; M];\n    let mut temporaries: [[Field; N]] = &[];\n    for i in 0..x.len() {\n        temporaries = temporaries.push_back(accumulator);\n        if (__is_zero(x[i]) == false) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    let mut T0: [Field; N] = [0; N];\n    for i in 0..x.len() {\n        let idx = x.len() - 1 - i;\n        if (__is_zero(x[idx]) == false) {\n            T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __batch_invert_slice<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[Field; N]],\n) -> [[Field; N]] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [Field; N] = __one::<N>();\n    let mut result: [[Field; N]] = [[0; N]];\n    let mut temporaries: [[Field; N]] = &[];\n    for i in 0..x.len() {\n        temporaries = temporaries.push_back(accumulator);\n        if (__is_zero(x[i]) == false) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n        result = result.push_back([0; N]);\n    }\n\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    let mut T0: [Field; N] = [0; N];\n    for i in 0..x.len() {\n        let idx = x.len() - 1 - i;\n        if (__is_zero(x[idx]) == false) {\n            T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\n/**\n* @brief compute a modular square root using the Tonelli-Shanks algorithm\n* @details only use for prime fields! Function may infinite loop if used for non-prime fields\n* @note this is unconstrained fn. To constrain a square root, validate that output^2 = self\n* TODO: create fn that constrains nonexistence of square root (i.e. find x where x^2 = -self)\n**/\npub(crate) unconstrained fn __tonelli_shanks_sqrt<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    input: [Field; N],\n) -> std::option::Option<[Field; N]> {\n    // Tonelli-shanks algorithm begins by finding a field element Q and integer S,\n    // such that (p - 1) = Q.2^{s}\n    // We can compute the square root of a, by considering a^{(Q + 1) / 2} = R\n    // Once we have found such an R, we have\n    // R^{2} = a^{Q + 1} = a^{Q}a\n    // If a^{Q} = 1, we have found our square root.\n    // Otherwise, we have a^{Q} = t, where t is a 2^{s-1}'th root of unity.\n    // This is because t^{2^{s-1}} = a^{Q.2^{s-1}}.\n    // We know that (p - 1) = Q.w^{s}, therefore t^{2^{s-1}} = a^{(p - 1) / 2}\n    // From Euler's criterion, if a is a quadratic residue, a^{(p - 1) / 2} = 1\n    // i.e. t^{2^{s-1}} = 1\n    // To proceed with computing our square root, we want to transform t into a smaller subgroup,\n    // specifically, the (s-2)'th roots of unity.\n    // We do this by finding some value b,such that\n    // (t.b^2)^{2^{s-2}} = 1 and R' = R.b\n    // Finding such a b is trivial, because from Euler's criterion, we know that,\n    // for any quadratic non-residue z, z^{(p - 1) / 2} = -1\n    // i.e. z^{Q.2^{s-1}} = -1\n    // => z^Q is a 2^{s-1}'th root of -1\n    // => z^{Q^2} is a 2^{s-2}'th root of -1\n    // Since t^{2^{s-1}} = 1, we know that t^{2^{s - 2}} = -1\n    // => t.z^{Q^2} is a 2^{s - 2}'th root of unity.\n    // We can iteratively transform t into ever smaller subgroups, until t = 1.\n    // At each iteration, we need to find a new value for b, which we can obtain\n    // by repeatedly squaring z^{Q}\n    let one_u60: U60Repr<N, 2> = unsafe { U60Repr::one() };\n    let primitive_root_log_size = __primitive_root_log_size::<_, MOD_BITS>(params);\n    let mut Q = (params.modulus_u60 - one_u60).shr(primitive_root_log_size - 1);\n    let Q_minus_one_over_two_u60 = (Q - one_u60).shr(2);\n    let Q_minus_one_over_two: [Field; N] = U60Repr::into(Q_minus_one_over_two_u60);\n    let mut z = __multiplicative_generator::<_, MOD_BITS>(params); // the generator is a non-residue\n    let mut b = __pow::<_, MOD_BITS>(params, input, Q_minus_one_over_two);\n    let mut r = __mul::<_, MOD_BITS>(params, input, b);\n    let mut t = __mul::<_, MOD_BITS>(params, r, b);\n    let mut check: [Field; N] = t;\n    for _ in 0..primitive_root_log_size - 1 {\n        check = __mul::<_, MOD_BITS>(params, check, check);\n    }\n    let mut found_root = false;\n    let one: [Field; N] = __one::<N>();\n    if (__eq(check, one) == false) {} else {\n        let mut t1 = __pow::<_, MOD_BITS>(params, z, Q_minus_one_over_two);\n        let mut t2 = __mul::<_, MOD_BITS>(params, t1, z);\n        let mut c = __mul::<_, MOD_BITS>(params, t2, t1);\n        let mut m: u32 = primitive_root_log_size;\n        // tonelli shanks inner 1\n        // (if t2m == 1) then skip\n        // else increase i and square t2m and go again\n        // algorithm runtime should only be max the number of bits in modulus\n        for _ in 0..MOD_BITS {\n            if (__eq(t, one)) {\n                found_root = true;\n                break;\n            }\n            let mut t2m = t;\n            // while loop time\n            let i = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, 0);\n            let mut j = m - i - 1;\n            b = c;\n            for _ in 0..j {\n                // how big\n                if (j == 0) {\n                    break;\n                }\n                b = __mul(params, b, b);\n                //j -= 1;\n            }\n            c = __mul::<_, MOD_BITS>(params, b, b);\n            t = __mul::<_, MOD_BITS>(params, t, c);\n            r = __mul::<_, MOD_BITS>(params, r, b);\n            m = i;\n        }\n    }\n    let result = if found_root {\n        std::option::Option::some(r)\n    } else {\n        std::option::Option::none()\n    };\n    result\n}\n","path":"/Users/zhengyawen/nargo/github.com/noir-lang/noir-bignum/v0.5.0/src/fns/unconstrained_ops.nr"},"115":{"source":"use crate::utils::u60_representation::U60Repr;\n\npub struct BigNumParams<let N: u32, let MOD_BITS: u32> {\n    pub has_multiplicative_inverse: bool,\n\n    // @brief modulus: all BigNum operations are evaluated modulo this value\n    pub modulus: [Field; N],\n\n    // @brief modulus but represented in a U60Repr form\n    pub modulus_u60: U60Repr<N, 2>,\n    pub modulus_u60_x4: U60Repr<N, 4>,\n\n    // @brief double_modulus: used when performing negations and subtractions\n    pub double_modulus: [Field; N],\n\n    // @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    pub redc_param: [Field; N],\n}\n\n// To be implemented by the user for any BigNum they define, or within the predefined BigNums in the `fields/` dir.\npub trait BigNumParamsGetter<let N: u32, let MOD_BITS: u32> {\n    pub fn get_params() -> BigNumParams<N, MOD_BITS>;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> BigNumParams<N, MOD_BITS> {\n    pub fn new(\n        has_multiplicative_inverse: bool,\n        modulus: [Field; N],\n        redc_param: [Field; N],\n    ) -> Self {\n        Self {\n            has_multiplicative_inverse,\n            modulus,\n            modulus_u60: U60Repr::from(modulus),\n            modulus_u60_x4: U60Repr::from(modulus),\n            double_modulus: get_double_modulus(modulus),\n            redc_param,\n        }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for BigNumParams<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        (self.has_multiplicative_inverse == other.has_multiplicative_inverse)\n            & (self.modulus == other.modulus)\n            & (self.modulus_u60 == other.modulus_u60)\n            & (self.modulus_u60_x4 == other.modulus_u60_x4)\n            & (self.double_modulus == other.double_modulus)\n            & (self.redc_param == other.redc_param)\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [Field; N]) -> [Field; N] {\n    let TWO_POW_120: Field = 0x1000000000000000000000000000000;\n    let m: U60Repr<N, 2> = U60Repr::from(modulus);\n    let mut result: [Field; N] = U60Repr::into(m + m);\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n","path":"/Users/zhengyawen/nargo/github.com/noir-lang/noir-bignum/v0.5.0/src/params.nr"},"116":{"source":"use crate::params::BigNumParams;\nuse crate::utils::map::map;\n\nuse crate::fns::{\n    constrained_ops::{\n        add, assert_is_not_equal, conditional_select, derive_from_seed, div, eq, mul, neg, sub,\n        udiv, udiv_mod, umod, validate_in_field, validate_in_range,\n    },\n    expressions::{__compute_quadratic_expression, evaluate_quadratic_expression},\n    serialization::{from_be_bytes, to_le_bytes},\n    unconstrained_ops::{\n        __add, __batch_invert, __batch_invert_slice, __derive_from_seed, __div, __eq, __invmod,\n        __is_zero, __mul, __neg, __pow, __sub, __tonelli_shanks_sqrt, __udiv_mod,\n    },\n};\nuse std::ops::{Add, Div, Mul, Neg, Sub};\n\npub struct RuntimeBigNum<let N: u32, let MOD_BITS: u32> {\n    pub limbs: [Field; N],\n    pub params: BigNumParams<N, MOD_BITS>,\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNum<N, MOD_BITS> {}\n\n// All functions prefixed `__` are unconstrained!\n// They're not actually decorated as `unconstrained` because to return the `params` (as part of Self) from an `unconstrained` fn would cause range constraints. Instead, each `__` fn wraps a call to an unconstrained fn, so that the already-range-constrained `params` can be inserted into Self after the unconstrained call.\npub(crate) trait RuntimeBigNumTrait<let N: u32, let MOD_BITS: u32>: Neg + Add + Sub + Mul + Div + Eq {\n    pub fn new(params: BigNumParams<N, MOD_BITS>) -> Self;\n    pub fn one(params: BigNumParams<N, MOD_BITS>) -> Self;\n    pub fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    pub fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self;\n    pub fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self;\n    pub fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self;\n    pub fn from_be_bytes<let NBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        x: [u8; NBytes],\n    ) -> Self;\n\n    pub fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes];\n\n    pub fn modulus(self) -> Self;\n    pub fn modulus_bits() -> u32;\n    pub fn num_limbs() -> u32;\n    // pub fn get(self) -> [Field];\n    pub fn get_limbs(self) -> [Field; N];\n    pub fn get_limb(self, idx: u32) -> Field;\n    pub fn set_limb(&mut self, idx: u32, value: Field);\n\n    unconstrained fn __eq(self, other: Self) -> bool;\n    unconstrained fn __is_zero(self) -> bool;\n\n    // unconstrained\n    pub fn __neg(self) -> Self;\n    // unconstrained\n    pub fn __add(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __sub(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __mul(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __div(self, other: Self) -> Self;\n    // unconstrained\n    pub fn __udiv_mod(self, divisor: Self) -> (Self, Self);\n    // unconstrained\n    pub fn __invmod(self) -> Self;\n    // unconstrained\n    pub fn __pow(self, exponent: Self) -> Self;\n\n    // unconstrained\n    pub fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M];\n    unconstrained fn __batch_invert_slice<let M: u32>(to_invert: [Self]) -> [Self];\n\n    pub fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self>;\n\n    // unconstrained\n    pub fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self);\n\n    pub fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    );\n\n    pub fn eq(lhs: Self, rhs: Self) -> bool {\n        lhs == rhs\n    }\n    pub fn assert_is_not_equal(self, other: Self);\n    pub fn validate_in_field(self);\n    pub fn validate_in_range(self);\n    // pub fn validate_gt(self, lhs: Self, rhs: Self);\n\n    pub fn udiv_mod(numerator: Self, divisor: Self) -> (Self, Self);\n    pub fn udiv(numerator: Self, divisor: Self) -> Self;\n    pub fn umod(numerator: Self, divisor: Self) -> Self;\n\n    pub fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> Neg for RuntimeBigNum<N, MOD_BITS> {\n    fn neg(self) -> Self {\n        let params = self.params;\n        Self { limbs: neg::<_, MOD_BITS>(params, self.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNumTrait<N, MOD_BITS> for RuntimeBigNum<N, MOD_BITS> {\n\n    fn new(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let limbs: [Field; N] = [0; N];\n        Self { limbs, params }\n    }\n\n    fn one(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let mut result = RuntimeBigNum::new(params);\n        result.limbs[0] = 1;\n        result\n    }\n\n    fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = unsafe { derive_from_seed::<_, MOD_BITS, _>(params, seed) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = unsafe { __derive_from_seed::<_, MOD_BITS, _>(params, seed) };\n        Self { limbs, params }\n    }\n\n    fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [Field]) -> Self {\n        Self { limbs: limbs.as_array(), params }\n    }\n\n    fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [Field; N]) -> Self {\n        Self { limbs, params }\n    }\n\n    fn from_be_bytes<let NBytes: u32>(params: BigNumParams<N, MOD_BITS>, x: [u8; NBytes]) -> Self {\n        Self { limbs: from_be_bytes::<_, MOD_BITS, _>(x), params }\n    }\n\n    fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes] {\n        to_le_bytes::<_, MOD_BITS, _>(self.limbs)\n    }\n\n    fn modulus(self) -> Self {\n        let params = self.params;\n        Self { limbs: params.modulus, params }\n    }\n\n    fn modulus_bits() -> u32 {\n        MOD_BITS\n    }\n\n    fn num_limbs() -> u32 {\n        N\n    }\n\n    // fn get(self) -> [Field] {\n    //     self.get_limbs()\n    // }\n\n    fn get_limbs(self) -> [Field; N] {\n        self.limbs\n    }\n\n    fn get_limb(self, idx: u32) -> Field {\n        self.limbs[idx]\n    }\n\n    fn set_limb(&mut self, idx: u32, value: Field) {\n        self.limbs[idx] = value;\n    }\n\n    unconstrained fn __eq(self, other: Self) -> bool {\n        assert(self.params == other.params);\n        __eq(self.limbs, other.limbs)\n    }\n\n    unconstrained fn __is_zero(self) -> bool {\n        __is_zero(self.limbs)\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __neg(self) -> Self {\n        let params = self.params;\n        let limbs = unsafe { __neg(params, self.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __add(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __sub(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __mul::<_, MOD_BITS>(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        let limbs = unsafe { __div::<_, MOD_BITS>(params, self.limbs, divisor.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = unsafe { __udiv_mod(self.limbs, divisor.limbs) };\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __invmod(self) -> Self {\n        let params = self.params;\n        assert(params.has_multiplicative_inverse);\n        let limbs = unsafe { __invmod::<_, MOD_BITS>(params, self.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __pow(self, exponent: Self) -> Self {\n        let params = self.params;\n        assert(params == exponent.params);\n        let limbs = unsafe { __pow::<_, MOD_BITS>(params, self.limbs, exponent.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs =\n            unsafe { __batch_invert::<_, MOD_BITS, _>(params, x.map(|bn| Self::get_limbs(bn))) };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // Note: can't return a slice from this unconstrained to a constrained function.\n    unconstrained fn __batch_invert_slice<let M: u32>(x: [Self]) -> [Self] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs = unsafe {\n            let inv_slice =\n                __batch_invert_slice::<_, MOD_BITS>(params, x.map(|bn| Self::get_limbs(bn)));\n            inv_slice.as_array()\n        };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self> {\n        let params = self.params;\n        let maybe_limbs = unsafe { __tonelli_shanks_sqrt(params, self.limbs) };\n        maybe_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self) {\n        let (q_limbs, r_limbs) = unsafe {\n            __compute_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n                params,\n                map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                lhs_flags,\n                map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                rhs_flags,\n                map(linear_terms, |bn| Self::get_limbs(bn)),\n                linear_flags,\n            )\n        };\n        (Self { limbs: q_limbs, params }, Self { limbs: r_limbs, params })\n    }\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) {\n        evaluate_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n            params,\n            map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            lhs_flags,\n            map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            rhs_flags,\n            map(linear_terms, |bn| Self::get_limbs(bn)),\n            linear_flags,\n        )\n    }\n\n    fn validate_in_field(self: Self) {\n        let params = self.params;\n        validate_in_field::<_, MOD_BITS>(params, self.limbs);\n    }\n\n    fn validate_in_range(self) {\n        validate_in_range::<_, MOD_BITS>(self.limbs);\n    }\n\n    fn assert_is_not_equal(self, other: Self) {\n        let params = self.params;\n        assert(params == other.params);\n        assert_is_not_equal(params, self.limbs, other.limbs);\n    }\n\n    fn udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = udiv_mod::<_, MOD_BITS>(params, self.limbs, divisor.limbs);\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    fn udiv(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: udiv::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn umod(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: umod::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let params = lhs.params;\n        assert(params == rhs.params);\n        Self { limbs: conditional_select(lhs.limbs, rhs.limbs, predicate), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Add for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: add::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Sub for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: sub::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Mul for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: mul::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Div for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: div::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for RuntimeBigNum<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        let params = self.params;\n        assert(params == other.params);\n        eq::<_, MOD_BITS>(params, self.limbs, other.limbs)\n    }\n}\n","path":"/Users/zhengyawen/nargo/github.com/noir-lang/noir-bignum/v0.5.0/src/runtime_bignum.nr"},"123":{"source":"global TWO_POW_56: u64 = 0x100000000000000;\nglobal TWO_POW_60: u64 = 0x1000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 120 bit fields\npub unconstrained fn split_120_bits(mut x: Field) -> (Field, Field) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_56 = ((x as u64) % TWO_POW_56) as Field;\n\n    let low = low_lower_64 + TWO_POW_64 * low_upper_56;\n    let high = (x - low_upper_56) / TWO_POW_56 as Field;\n\n    (low, high)\n}\n\n/**\n * @brief Decomposes a single field into two 60 bit fields\n *\n * @description Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\n **/\npub unconstrained fn split_60_bits(x: Field) -> (u64, u64) {\n    // Here we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let x_lower_64 = (x as u64);\n    let low = x_lower_64 % TWO_POW_60;\n    let high = ((x - (low as Field)) / TWO_POW_60 as Field) as u64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn __normalize_limbs<let N: u32>(\n    input: [Field; N],\n    range: u32,\n) -> [Field; N] {\n    let mut normalized: [Field; N] = [0; N];\n    let mut inp: _ = input;\n    for i in 0..(range - 1) {\n        let (lo, hi) = split_120_bits(inp[i]);\n\n        normalized[i] = lo;\n        inp[i + 1] += hi;\n    }\n    {\n        let (lo, hi) = split_120_bits(inp[range - 1]);\n        normalized[range - 1] = lo;\n        assert(hi == 0);\n    }\n    normalized\n}\n","path":"/Users/zhengyawen/nargo/github.com/noir-lang/noir-bignum/v0.5.0/src/utils/split_bits.nr"},"124":{"source":"use crate::utils::msb::get_msb64;\nuse crate::utils::split_bits;\n\n/**\n * @brief U60Repr represents a BigNum element as a sequence of 60-bit unsigned integers.\n *\n * @description: used in unconstrained functions when computing witness values.\n * It is helpful to use u60 types when evaluating addition operations that can overflow the field modulus,\n * as well as when performing bit shifts.\n */\npub struct U60Repr<let N: u32, let NumSegments: u32> {\n    pub(crate) limbs: [u64; N * NumSegments],\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Add for U60Repr<N, NumSegments> {\n    fn add(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut carry: u64 = 0;\n        for i in 0..N * NumSegments {\n            let mut add: u64 = self.limbs[i] + b.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            result.limbs[i] = add;\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Sub for U60Repr<N, NumSegments> {\n    fn sub(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        for i in 0..N * NumSegments {\n            borrow = ((b.limbs[i] + borrow_in) > self.limbs[i]) as u64;\n            let sub = (borrow << 60) + self.limbs[i] - b.limbs[i] - borrow_in;\n            result.limbs[i] = sub;\n            borrow_in = borrow;\n        }\n\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::From<[Field; N]> for U60Repr<N, NumSegments> {\n    fn from(input: [Field; N]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..(N) {\n            let (lo, hi) = unsafe { split_bits::split_60_bits(input[i]) };\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::Into<[Field; N]> for U60Repr<N, NumSegments> {\n    fn into(x: U60Repr<N, NumSegments>) -> [Field; N] {\n        let mut result: [Field; N] = [0; N];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..N {\n            result[i] = x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * two_pow_60);\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::cmp::Eq for U60Repr<N, NumSegments> {\n    fn eq(self, other: Self) -> bool {\n        self.limbs == other.limbs\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> U60Repr<N, NumSegments> {\n\n    pub(crate) unconstrained fn new<let NumFieldSegments: u32>(\n        x: [Field; N * NumFieldSegments],\n    ) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..(N * NumFieldSegments) {\n            let (lo, hi) = split_bits::split_60_bits(x[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn one() -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        result.limbs[0] = 1;\n        result\n    }\n\n    pub(crate) unconstrained fn into_field_array(\n        x: U60Repr<N, NumSegments>,\n    ) -> [Field; N * NumSegments / 2] {\n        let mut result: [Field; N * NumSegments / 2] = [0; N * NumSegments / 2];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..(N * NumSegments / 2) {\n            result[i] = x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * two_pow_60);\n        }\n        result\n    }\n\n    pub(crate) unconstrained fn gte(self, b: Self) -> bool {\n        let mut result = false;\n        let mut early_exit = false;\n        for i in 0..(N * NumSegments) {\n            if (b.limbs[(N * NumSegments) - 1 - i] < self.limbs[((N * NumSegments) - 1 - i)]) {\n                result = true;\n                early_exit = true;\n                break;\n            } else if (\n                b.limbs[(N * NumSegments) - 1 - i] != self.limbs[((N * NumSegments) - 1 - i)]\n            ) {\n                result = false;\n                early_exit = true;\n                break;\n            }\n        }\n        if (early_exit == false) {\n            result = (self.limbs[0] == b.limbs[0]);\n        }\n        result\n    }\n\n    pub(crate) fn get_bit(self, bit: u32) -> bool {\n        let segment_index = bit / 60;\n        let uint_index = bit % 60;\n\n        let limb: u64 = self.limbs[segment_index];\n        let value = (limb >> uint_index as u8) & 1;\n        value == 1\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = shift % 60;\n        let remainder_shift = 60 - limb_shift;\n        let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        result.limbs[0] = (self.limbs[0 + num_shifted_limbs] >> limb_shift as u8);\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i + num_shifted_limbs];\n            result.limbs[i] = (value >> limb_shift as u8);\n            let remainder: u64 = (value << remainder_shift as u8) & mask;\n            result.limbs[i - 1] = result.limbs[i - 1] + remainder;\n        }\n        result\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shr1(&mut self) {\n        let value = self.limbs[NumSegments * N - 1];\n        self.limbs[NumSegments * N - 1] = value >> 1;\n\n        let mut remainder = (value & 1) << 59;\n\n        for i in 0..N * NumSegments {\n            let value = self.limbs[N * NumSegments - 1 - i];\n            self.limbs[N * NumSegments - 1 - i] = (value >> 1) + remainder;\n            remainder = (value << 59) & 0x800000000000000;\n        }\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    pub(crate) fn shl(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; NumSegments * N] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift: u8 = 60 - limb_shift as u8;\n\n        // 83\n        // limb shift = 1\n        // inside shift = 19 bits to the left\n        // meaning we have 19 carry bits and 41 remainder bits\n        let mask: u64 = (1 as u64 << 60) - 1;\n        //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        let value = self.limbs[0];\n\n        let mut remainder = (value >> remainder_shift);\n        result.limbs[num_shifted_limbs] = (value << (limb_shift as u8)) & mask;\n\n        // shift 84. num shifted = 1\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i];\n            let upshift = ((value << (limb_shift as u8)) + remainder) & mask;\n            result.limbs[i + num_shifted_limbs] = upshift;\n            remainder = (value >> remainder_shift);\n            // let remainder: u64 = (self.limbs.get(i + num_shifted_limbs as u64) << remainder_shift as u8) & mask;\n            // result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    pub(crate) fn increment(&mut self) {\n        let mut carry: u64 = 0;\n\n        let mut add: u64 = self.limbs[0] + 1;\n        carry = add >> 60;\n        add = add - (carry << 60);\n        self.limbs[0] = add;\n\n        for i in 1..NumSegments * N {\n            let mut add: u64 = self.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            self.limbs[i] = add;\n        }\n    }\n\n    pub(crate) unconstrained fn get_msb(val: Self) -> u32 {\n        let mut count = 0;\n        for i in 0..N * NumSegments {\n            let v = val.limbs[((N * NumSegments) - 1 - i)];\n            if (v > 0) {\n                count = 60 * ((N * NumSegments) - 1 - i) + get_msb64(v);\n                break;\n            }\n        }\n        count\n    }\n}\n","path":"/Users/zhengyawen/nargo/github.com/noir-lang/noir-bignum/v0.5.0/src/utils/u60_representation.nr"},"135":{"source":"use dep::bignum::{params::BigNumParams, RuntimeBigNum};\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n    for i in 0..32 {\n        // Padded hash is reversed\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] =\n        [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i < 52 + ps_len {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i == 52 + ps_len {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i == 53 + ps_len {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\n\n/**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @note The `exponent` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\npub fn verify_sha256_pkcs1v15<let NumLimbs: u32, let ModBits: u32>(\n    msg_hash: [u8; 32],\n    sig: RuntimeBigNum<NumLimbs, ModBits>,\n    exponent: u32,\n) -> bool {\n    assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n    let mut exponentiated = sig * sig; // sig^2\n    if exponent == 65537 {\n        // e = 65537 = 1 0000 0000 0000 0001\n        exponentiated = exponentiated * exponentiated; // sig^4\n        exponentiated = exponentiated * exponentiated; // sig^8\n        exponentiated = exponentiated * exponentiated; // sig^16\n        exponentiated = exponentiated * exponentiated; // sig^32\n        exponentiated = exponentiated * exponentiated; // sig^64\n        exponentiated = exponentiated * exponentiated; // sig^128\n        exponentiated = exponentiated * exponentiated; // sig^256\n        exponentiated = exponentiated * exponentiated; // sig^512\n        exponentiated = exponentiated * exponentiated; // sig^1024\n        exponentiated = exponentiated * exponentiated; // sig^2048\n        exponentiated = exponentiated * exponentiated; // sig^4096\n        exponentiated = exponentiated * exponentiated; // sig^8192\n        exponentiated = exponentiated * exponentiated; // sig^16384\n        exponentiated = exponentiated * exponentiated; // sig^32768\n        exponentiated = exponentiated * exponentiated; // sig^65536\n    }\n    // otherwise, e = 3 = 11\n    exponentiated = exponentiated * sig; // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n    let mut padded_sha256_hash_bytes: [u8; (ModBits + 7) / 8] = exponentiated.to_le_bytes();\n    compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_1024() {\n    // Output of `cargo run -- --msg \"hello world! test#123\" --bits 1024` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world! test#123\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                220, 155, 229, 143, 122, 133, 55, 215, 75, 44, 132, 111, 57, 33, 248, 84, 213, 170,\n                193, 96, 253, 57, 124, 13, 251, 42, 92, 147, 105, 172, 233, 85,\n            ],\n    );\n\n    let params: BigNumParams<9, 1024> = BigNumParams::new(\n        false,\n        [\n            0xab238ad9cb37979a43aefbf10be8fb,\n            0x31347febe45fe8c2dac1dd30900704,\n            0xa5a9a6b9cd0cc2b9d13bbd4e068263,\n            0x5eac6390f7873fe97ff9bb14a173ea,\n            0xbc41f700c91fd733a2c63177bbdbd4,\n            0x41442bd58769a3595b659a2ec9c6be,\n            0x4ddc91395f330382aa2e2d3fbe147,\n            0x3d008ff255a0bc71c7887f5728ba1,\n            0xb640c3a8f511c64e,\n        ],\n        [\n            0x5d53d2634c6a0918266043968ce263,\n            0x5dd4be3dce0323a492ee9340aec4db,\n            0xf82d0e2e5c8319f01a460c72c01854,\n            0x236e6fc6e62e8a1d522acda5fb3892,\n            0xdaf755619d66e580901aa224d03174,\n            0x8366291616480e7e1f202dbcedda87,\n            0x40ba1202537d1e94561ccc05265586,\n            0x69b993d857ba89ea5de9822aeb4b93,\n            0x167968c0000761a273,\n        ],\n    );\n\n    let signature: RuntimeBigNum<9, 1024> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xc3850e84ea02da3f028ff422f4d6a9,\n            0x9761f0bd9021f76d45c60df0670a19,\n            0xc1ede421a43607ab623ed4d5a17fc8,\n            0x86197b4315206f4d53200b42555831,\n            0xe95783b69db28c26a83706f39d04cd,\n            0x18b178dc1a9ec76fb22b57e4dfa703,\n            0xdd0e19cd5a09ab48e7af4d0e3470e3,\n            0x10004dfab1cf91304e80e6baa4dfc7,\n            0x241c3fd77b90adef,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048() {\n    // Output of `cargo run -- --msg \"Hello World! This is Noir-RSA\"` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                91, 207, 46, 60, 22, 153, 217, 144, 2, 127, 224, 143, 181, 45, 32, 120, 122, 131,\n                166, 79, 166, 183, 43, 158, 116, 105, 73, 207, 196, 77, 33, 5,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0x8d5e7d9daedd6cfd1c9bdf0227e05b,\n            0xbfb937fc4d3cf02cc0af780f3cab44,\n            0xd20637ef7adcf5d238ee87bccc9bca,\n            0xb9db4f2663108e2f8b673f7612ae8b,\n            0x85f894ef669b36bfd3d86b0a28873,\n            0xdcc70e1884e38b8229cce3b884121d,\n            0x35488d1138e0b03e1676f7f5d8a5b3,\n            0xe1a97820e7dcbb4eab35c9b71bb273,\n            0x97d19eb3c63249ddbfcff915863f54,\n            0x3a78c7af6da0f6af0d67b1ca4b6065,\n            0xd7a3c433c020f624821e5e678c7d69,\n            0x52d5b53240feae82ffea3d2a3d9b09,\n            0xb8aad5e19e2163f68997c6fdd71906,\n            0x5db432d06e8b0bf59511100c7894e2,\n            0xadc0bbc4c54da10d1cc88438ea3127,\n            0xece1cf6a1501109cd2734d5893c8d9,\n            0x7196b90acdf06c31b1288064fd0c27,\n            0xc8,\n        ],\n        [\n            0x1b1deccf4dbde852c34a5d6908a0f,\n            0xbc9e5bdab22f023fbcca58692bccf5,\n            0x1f65439685623e45396ff55751c3bf,\n            0x2b6ad2c5f8e3aac15d0ccbab816bfa,\n            0x5ca2e8e3048243c16c708a8030ab0d,\n            0x30079bfeb1fa51e5501581173ca19c,\n            0xff8d5f6bea485fdcc2716327f69ab4,\n            0x36b599d81589416b5b5f037986b999,\n            0x75612e34a4ff29f0a19a7823512f58,\n            0x288b6897929b54c3b26a5faa07c00f,\n            0x4b5675fa13ab7444f1f047d3eb1bbe,\n            0x6ba0ac610ef9f267ab30fe25bb1c84,\n            0xa386b48ee03168d5cea3ecb9dc901f,\n            0xacf1a01f7dba44e050c976142fb1f6,\n            0x97a63b5cb7efc60d3502946aec63cf,\n            0x12cc1d5cab10a1e9e2398d29b9e3ef,\n            0x4635cf25c66e76bba8034df46204fb,\n            0x146f,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xad29e07d16a278de49a371b9760a27,\n            0x86311920cc0e17a3c20cdff4c56dbb,\n            0x863556c6c5247dd83668dd825716ae,\n            0xc247c960945f4485b46c33b87425ca,\n            0x7326463c5c4cd5b08e21b938d9ed9a,\n            0x4f89fe0c82da08a0259eddb34d0da1,\n            0x43a74e76d4e1bd2666f1591889af0d,\n            0x240f7b80f0ff29f4253ee3019f832d,\n            0xc6edd131fbaaf725fd423dac52b362,\n            0x85f9732679242163e8afff44f6104d,\n            0xd3c3bbcb1757013fd6fb80f31dd9a6,\n            0x9008633f15df440e6df6d21ee585a2,\n            0x324df3425ed256e283be5b6b761741,\n            0xc60c1302929bd0e07caa4aeff4e8fd,\n            0x600d804ff13ba8d0e1bc9508714212,\n            0x50f7e75e5751d7edd61167027926be,\n            0x0db41d39442023e1420a8a84fe81d9,\n            0xab,\n        ],\n    };\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n    // Output of `cargo run -- --msg \"hello world\" -e 3` in the `signature_gen` directory\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world\".as_bytes());\n    assert(\n        sha256_hash\n            == [\n                185, 77, 39, 185, 147, 77, 62, 8, 165, 46, 82, 215, 218, 125, 171, 250, 196, 132,\n                239, 227, 122, 83, 128, 238, 144, 136, 247, 172, 226, 239, 205, 233,\n            ],\n    );\n\n    let params: BigNumParams<18, 2048> = BigNumParams::new(\n        false,\n        [\n            0xe40ee47801326543c8e84b85d567c1,\n            0x5b54ea87f0ce29de1995697b0696fd,\n            0x457078f8fdce68b437cac0970b2452,\n            0x473ec776fee3731b6ab06e35875ddc,\n            0x62dedd594e5f12c80c3ccb5791a6cd,\n            0xecb934b9d8272c5e3a418145345499,\n            0xd1af643b3d785470ed0c6cd633f706,\n            0xb58a57b9e96eccbdfc7c17f0333d4,\n            0x2ebd34b5039fc596504927c282c60d,\n            0x3a44928a74f25fc1043bb37ce4dfa8,\n            0x91448459f9617fac33a2816162ac9e,\n            0x70cb910d9f3e1a78864640ec6c8240,\n            0x9aed33f6b31f1c9de67248a98c180,\n            0x7f1416e032c79488c94b311e87bd9c,\n            0x7191b4ebb1b3fffa949fa48ed01e5,\n            0x350a75cbaeca6bfdd71ca83cdbcae9,\n            0xfb1d274fa207457c6814d42c09f9cf,\n            0xd4,\n        ],\n        [\n            0x803bf4d38110a7d37fdd05f590dee9,\n            0xa68d317c933f37cab5ab4e7c00a3b9,\n            0x476a05a536bf5f2aa1b8850146cba7,\n            0xca297ea8b5528d91d4836ff27c30ab,\n            0x75cf2eaab76eefa12bbd570f1aea9f,\n            0x8f6a8ab877d9c5bcd98c37bdc5c2d3,\n            0xd497db1f6ebe83decacaa647fabea6,\n            0x686b27ca330e25e7a7cf197f6433ef,\n            0xfde04d2225c8308b07580af0058a0f,\n            0xa29fb69777c0e916976243b2b09855,\n            0xf983592285852e7e1c2cb3ae968323,\n            0x673608017f9f5acf67a01b73728d70,\n            0xeeff82521c0bc432a05f4b7444fac0,\n            0x85a89c4d229f60aaa3aa7ac7dac1e2,\n            0xcfecff93bc9fbfe0d6dff6091f2db8,\n            0xf20f047dcb224b4447bd098c07f8c2,\n            0x554bb53cadeb3eaab911a189f90227,\n            0x133b,\n        ],\n    );\n\n    let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n        params,\n        limbs: [\n            0xa250eff812c63eaaeaa3f04641c05f,\n            0xecc09613cb8b289c1f37c8f92e6a05,\n            0x2c0a0510058360c07af65d46f594fd,\n            0x943d67513363d3de430c94a1dafe7c,\n            0x511ec8e9b10bc6c6ff0d6c232ccf92,\n            0x50ffd07b3c093b3f5fc027de847731,\n            0xc268e1489449943fdafdf89ff168c3,\n            0x0b8b7f9f49b492f78fda58d252f23a,\n            0x491c6c4ef836a6a8730b7bf81e865e,\n            0x8746c75fb079d014e419543f56d7f0,\n            0x65804c417d6168a8bc0025d255cebf,\n            0xf695e91b77890b8e3fd775fa56e627,\n            0x5e90001c0218550f4083ae28025a2f,\n            0x526bd4eff34f25f62a698f0470e0a6,\n            0x7f224306a7d9daf536b1559434c6c6,\n            0x88809f16fe1fcea3c87511d9319735,\n            0x7694685fee0bfab4a9196b92ec6f2e,\n            0xa7,\n        ],\n    };\n\n    assert(verify_sha256_pkcs1v15(sha256_hash, signature, 3));\n}\n","path":"/Users/zhengyawen/nargo/github.com/noir-lang/noir_rsa/v0.5.0/lib/src/rsa.nr"}},"names":["main"],"brillig_names":["build_msg_block","attach_len_to_msg_block","split_60_bits","__mul","__compute_quadratic_expression_with_borrow_flags","decompose_hint","directive_integer_quotient","directive_invert","directive_to_radix"]}